---
format: 
  html:
    theme: lux
    number-sections: true

title: "In-class Exercise 4"
author: "Tai Yu Ying"
date: "Sep 16 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

## Getting Started

Install and launching R packages

The code chunk below uses p_load() of pacman package to check if tidyverse packages have been installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(sf, ggstatsplot, tmap, tidyverse, knitr, GWmodel)
```

## Preparing data

::: panel-tabset
### DIY

Using the steps, you learned from previous hands-on, complete the following tasks:

-   import Hunan shapefile and parse it into a sf polygon feature object

-   import Hunan_2012.csv file parse it into a tibble data.frame

-   join Hunan and Hunan_2012 data.frames

### Importing Hunan shapefile

```{r}
hunansf <- st_read(dsn = "Data/geospatial", 
                 layer = "Hunan")
```

### Importing Hunan_2012 table

```{r}
hunan2012 <- read.csv("Data/aspatial/Hunan_2012.csv")
```

### Joining Hunan and Hunan_2012

```{r}
hunan_sf <- left_join(hunansf, hunan2012) %>%
  select(1:3, 7 , 15 ,16, 31, 32)
```
:::

## Converting to SpatialPolygonDataFrame

::: callout-note
GWmodel presently is built around the older sp and not sf formats for handling spatial data in R.
:::

```{r}
hunan_sp <- hunan_sf %>%
  as_Spatial()
```

## Geographically Weighted Summary Statistics with adaptive bandwidth

### Determine adaptive bandwidth

::: panel-tabset
### Cross-validation

```{r}
bw_CV <- bw.gwr(GDPPC ~ 1,
                data = hunan_sp,
                approach = "CV",
                adaptive = TRUE,
                kernel = "bisquare",
                longlat = T)
```

```{r}
bw_CV
```

### AIC

```{r}
bw_AIC <- bw.gwr(GDPPC ~ 1,
                data = hunan_sp,
                approach = "AIC",
                adaptive = TRUE,
                kernel = "bisquare",
                longlat = T)
```

```{r}
bw_AIC
```
:::

### Computing geographically weighted summary statistics

```{r}
gwstat <- gwss(data = hunan_sp,
               vars = "GDPPC",
               bw = bw_AIC,
               kernel = "bisquare",
               adaptive = TRUE,
               longlat = T)
```

```{r}
bw_AIC
```

### Preparing the output data

Code chunk below is used to extract SDF data table from gwss object output from gwss(). It will be converted into data.frame by using 'as.data.frame()'.

```{r}
gwstat_df <- as.data.frame(gwstat$SDF)
```

Next, cbind() is used to append the newly derived data.frame onto hunan_sf sf data.frame.

```{r}
hunan_gstat <- cbind(hunan_sf, gwstat_df)
```

## Geographically Weighted Summary Statistics with fixed bandwidth

### Determine fixed bandwidth

::: panel-tabset
### Cross-validation

```{r}
bw_CV <- bw.gwr(GDPPC ~ 1,
                data = hunan_sp,
                approach = "CV",
                adaptive = FALSE,
                kernel = "bisquare",
                longlat = T)
```

```{r}
bw_CV
```

### AIC

```{r}
bw_AIC <- bw.gwr(GDPPC ~ 1,
                data = hunan_sp,
                approach = "AIC",
                adaptive = FALSE,
                kernel = "bisquare",
                longlat = T)
```

```{r}
bw_AIC
```
:::

### Computing geographically weighted summary statistics

```{r}
gwstat <- gwss(data = hunan_sp,
               vars = "GDPPC",
               bw = bw_AIC,
               kernel = "bisquare",
               adaptive = FALSE,
               longlat = T)
```

```{r}
bw_AIC
```

## Visualising geographically weighted summary statistics

```{r}
tm_shape(hunan_gstat) +
  tm_fill("GDPPC_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Distribution of geographically weighted mean",
            main.title.position = "center",
            main.title.size = 2.0,
            legend.text.size = 1.2,
            legend.height = 1.50,
            legend.width = 1.50,
            frame = TRUE)
```
