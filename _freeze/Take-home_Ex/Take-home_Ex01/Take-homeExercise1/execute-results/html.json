{
  "hash": "ee521c5975e2ce25c1ffd2b64aec9ff1",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  html:\n    theme: lux\n    number-sections: true\n\ntitle: \"Take-home Exercise 1\"\nauthor: \"Tai Yu Ying\"\ndate: \"Sep 8 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\n---\n\n\n\n\n## Overview\n\nRoad traffic accidents are a major global health issue, causing millions of deaths and injuries each year. The majority of fatalities occur in low- and middle-income countries, particularly among vulnerable road users. These accidents not only lead to human suffering but also impose a significant economic burden on individuals, families, and nations. Thailand, in particular, has a high rate of road traffic deaths, with a significant portion of accidents occurring on national highways and in designated \"black spots.\"\n\n## Objective\n\nThe objective of this project is to investigate the factors influencing road traffic accidents in the Bangkok Metropolitan Region (BMR) using spatial and spatio-temporal point pattern analysis.\n\n-   **Visualize spatio-temporal dynamics:** Use statistical graphics and geovisualization methods to depict the distribution of road traffic accidents over time and space.\n\n-   **Conduct spatial analysis:** Employ network-based spatial point pattern analysis methods to examine the spatial distribution of accidents within the road network.\n\n-   **Conduct spatio-temporal analysis:** Utilize temporal network-based spatial point pattern analysis methods to explore the relationship between accidents and both spatial and temporal factors.\n\n## The Data\n\nThree basic data sets are used, they are:\n\n-   [Thailand Road Accident \\[2019-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle\n\n-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.\n\n## Installing and launching the R packages\n\nIn this exercise, the following R packages will be used, they are:\n\n-   **spNetwork**:\n\n    -   `st_network` for converting road networks into an sf object.\n\n    -   `kernel_density` to perform kernel density estimation (KDE) on the network to visualize accident hotspots.\n\n    -   `k_function` to analyze spatial clustering of accidents on the road network.\n\n-   **sf**:\n\n    -   `st_as_sf()` to convert datasets into spatial features (sf objects) for spatial analysis.\n\n    -   `st_transform()` to transform coordinate reference systems (CRS) for accurate geospatial representation.\n\n    -   `st_join()` to perform spatial joins between two sf objects, such as accident locations and administrative boundaries.\n\n-   **tmap**:\n\n    -   `tm_shape()` to define the spatial layers (e.g., boundaries, roads, accidents).\n\n    -   `tm_fill()` and `tm_borders()` to color and outline the regions (e.g., administrative boundaries).\n\n    -   `tm_dots()` to plot accident points on the map.\n\n    -   `tm_raster()` to add raster layers like kernel density maps.\n\n    -   `tmap_arrange()` to arrange multiple maps into a grid layout.\n\n    -   `tmap_animation()` to create animated time-lapse maps for temporal accident patterns.\n\n-   **tidyverse (dplyr)**:\n\n    -   `filter()` to subset data based on conditions (e.g., accidents on straight roads).\n\n    -   `group_by()` and `summarize()` to aggregate data by specific factors such as road type or weather condition.\n\n    -   `mutate()` to add new columns or modify existing data.\n\n    -   `arrange()` to sort data in ascending or descending order.\n\n-   **spatstat**:\n\n    -   `as.ppp()` to convert sf objects into point pattern format for spatial analysis.\n\n    -   `density()` to perform kernel density estimation (KDE) for accident distribution.\n\n    -   `Kest()` for computing Ripley’s K-function to assess spatial clustering.\n\n-   **raster**:\n\n    -   `raster()` to convert KDE output to raster objects for visual representation on the map.\n\n    -   `writeRaster()` to save raster files for later use or visualization.\n\n-   **ggplot2**:\n\n    -   `ggplot()` to create plots such as heatmaps for visualizing accidents over time.\n\n    -   `geom_tile()` for creating heatmaps.\n\n    -   `scale_fill_gradient()` to apply color gradients in the heatmaps.\n\n-   **gifski**:\n\n    -   `save_gif()` to create and save animated maps or time-lapse visualizations.\n\nUse the code chunk below to install and launch the four R packages.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spNetwork, tmap, tidyverse, dplyr, spatstat, raster, gifski, ggplot2)\n```\n:::\n\n\n\n\n## Data Import and Preparation\n\n### Importing [Thailand Road Accident \\[2019-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022)\n\nSince `acc` data set is in csv file format, we will use [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package to import `thai_road_accident_2019_2022.csv` as shown the code chunk below. The output R object is called `acc`.\n\n::: panel-tabset\n### Objectives\n\nThe below code uses the following to:\n\n-   **`read_csv()`**: This function is used to load the CSV file (`thai_road_accident_2019_2022.csv`) into R. The dataset is stored in a variable called `acc`.\n\n-   **`filter()`**: This function is from the `dplyr` package and is used to filter the rows of the dataset.\n\n-   **`!is.na(longitude) & !is.na(latitude)`**: This condition ensures that only rows where both `longitude` and `latitude` are not missing (`NA`) are kept. Any rows with missing coordinates will be removed.\n\n-   **`mutate()`**: This function is used to create or modify columns in a dataframe\n\n-   **`month(incident_datetime)`**: This function extracts the month from the `incident_datetime` column, and stores it in a new column called `Month_num` (numeric form of the month)\n\n-   **`month(incident_datetime, label = TRUE, abbr = TRUE)`**: This extracts the month in a labeled form, and it will be abbreviated (e.g., \"Jan\", \"Feb\"). This is stored in a new column called `Month_fac`\n\n-   **`day(incident_datetime)`**: This extracts the day of the month from the `incident_datetime` column and stores it in a new column called `dayofweek`\n\n-   **`st_as_sf()`**: This function from the `sf` package is used to convert the dataframe to a simple features (spatial) object\n\n-   **`coords = c(\"longitude\", \"latitude\")`**: This argument tells `st_as_sf()` to use the `longitude` and `latitude` columns to define the spatial coordinates\n\n-   **`crs = 4326`**: This specifies the Coordinate Reference System (CRS) for the spatial object. EPSG:4326 refers to **WGS 84**, which is the standard geographic CRS (latitude and longitude in degrees)\n\n-   **`st_transform()`**: This function is used to reproject the spatial object to a different CRS\n\n-   **`crs = 32647`**: This specifies the target CRS, which is **UTM Zone 47N**. This is a projected CRS that uses meters as units and is more appropriate for spatial analysis in Thailand. EPSG:32647 is commonly used for accurate distance and area measurements in this region\n\n### The code\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc <- read_csv(\"Data/rawdata/thai_road_accident_2019_2022.csv\") %>%\n  filter(!is.na(longitude) & !is.na(latitude)) %>%   # Filter out rows with missing geographic coordinates\n  mutate(Month_num = month(incident_datetime)) %>%\n  mutate(Month_fac = month(incident_datetime, label = TRUE, abbr = TRUE)) %>%\n  mutate(dayofweek = day(incident_datetime)) %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %>%  # Specify the CRS\n  st_transform(crs = 32647)  # Transform to your desired CRS\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(acc, \"Data/rds/acc.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nacc <- read_rds(\"Data/rds/acc.rds\")\n```\n:::\n\n\n\n\n### Missing data check\n\nWe can identify rows with missing values by applying *filter()* in combination with *is.na()* to check each column in your dataset. The function *if_any()* checks all columns, and if any of the columns contain *NA*, the corresponding row will be flagged.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Identify rows with missing values\nacc_incomplete <- acc %>%\n  filter(if_any(everything(), is.na))\n\n# View incomplete rows\nacc_incomplete\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 0 features and 19 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 0 × 20\n# ℹ 20 variables: acc_code <dbl>, incident_datetime <dttm>,\n#   report_datetime <dttm>, province_th <chr>, province_en <chr>, agency <chr>,\n#   route <chr>, vehicle_type <chr>, presumed_cause <chr>, accident_type <chr>,\n#   number_of_vehicles_involved <dbl>, number_of_fatalities <dbl>,\n#   number_of_injuries <dbl>, weather_condition <chr>, road_description <chr>,\n#   slope_description <chr>, Month_num <dbl>, Month_fac <ord>, dayofweek <int>,\n#   geometry <GEOMETRY [m]>\n```\n\n\n:::\n:::\n\n\n\n\n### Examine output\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\n\nThe code chunk below shows *summary()* and *list()* of Base R.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(acc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    acc_code       incident_datetime               \n Min.   : 571834   Min.   :2019-01-01 00:00:00.00  \n 1st Qu.:3789326   1st Qu.:2020-01-16 14:57:30.00  \n Median :3823434   Median :2021-01-02 18:30:00.00  \n Mean   :4228913   Mean   :2021-01-08 11:25:47.25  \n 3rd Qu.:5830777   3rd Qu.:2022-01-02 19:17:00.00  \n Max.   :7571316   Max.   :2022-12-31 23:55:00.00  \n                                                   \n report_datetime                  province_th        province_en       \n Min.   :2019-01-01 03:05:00.00   Length:81376       Length:81376      \n 1st Qu.:2020-03-16 15:27:00.00   Class :character   Class :character  \n Median :2021-03-31 08:39:00.00   Mode  :character   Mode  :character  \n Mean   :2021-03-26 16:52:04.98                                        \n 3rd Qu.:2022-03-01 10:02:15.00                                        \n Max.   :2023-01-26 13:20:00.00                                        \n                                                                       \n    agency             route           vehicle_type       presumed_cause    \n Length:81376       Length:81376       Length:81376       Length:81376      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n accident_type      number_of_vehicles_involved number_of_fatalities\n Length:81376       Min.   : 0.000              Min.   : 0.0000     \n Class :character   1st Qu.: 1.000              1st Qu.: 0.0000     \n Mode  :character   Median : 1.000              Median : 0.0000     \n                    Mean   : 1.535              Mean   : 0.1461     \n                    3rd Qu.: 2.000              3rd Qu.: 0.0000     \n                    Max.   :27.000              Max.   :13.0000     \n                                                                    \n number_of_injuries weather_condition  road_description   slope_description \n Min.   : 0.0000    Length:81376       Length:81376       Length:81376      \n 1st Qu.: 0.0000    Class :character   Class :character   Class :character  \n Median : 0.0000    Mode  :character   Mode  :character   Mode  :character  \n Mean   : 0.8139                                                            \n 3rd Qu.: 1.0000                                                            \n Max.   :51.0000                                                            \n                                                                            \n   Month_num        Month_fac       dayofweek              geometry    \n Min.   : 1.000   Dec    : 9621   Min.   : 1.00   POINT        :81376  \n 1st Qu.: 3.000   Apr    : 9403   1st Qu.: 8.00   epsg:32647   :    0  \n Median : 6.000   Jan    : 8494   Median :15.00   +proj=utm ...:    0  \n Mean   : 6.469   Mar    : 6468   Mean   :15.72                        \n 3rd Qu.:10.000   Oct    : 6293   3rd Qu.:24.00                        \n Max.   :12.000   Jul    : 6255   Max.   :31.00                        \n                  (Other):34842                                        \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(acc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\nSimple feature collection with 81376 features and 19 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16183190 ymin: -936.228 xmax: 1200243 ymax: 4918525\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 81,376 × 20\n   acc_code incident_datetime   report_datetime     province_th province_en     \n *    <dbl> <dttm>              <dttm>              <chr>       <chr>           \n 1   571905 2019-01-01 00:00:00 2019-01-02 06:11:00 ลพบุรี        Loburi          \n 2  3790870 2019-01-01 00:03:00 2020-02-20 13:48:00 อุบลราชธานี   Ubon Ratchathani\n 3   599075 2019-01-01 00:05:00 2019-01-01 10:35:00 ประจวบคีรีขันธ์ Prachuap Khiri …\n 4   571924 2019-01-01 00:20:00 2019-01-02 05:12:00 เชียงใหม่     Chiang Mai      \n 5   599523 2019-01-01 00:25:00 2019-01-04 09:42:00 นครสวรรค์    Nakhon Sawan    \n 6   571982 2019-01-01 00:30:00 2019-01-07 12:46:00 แม่ฮ่องสอน    Mae Hong Son    \n 7   612782 2019-01-01 00:30:00 2019-10-25 14:25:00 ชุมพร        Chumphon        \n 8   599235 2019-01-01 00:35:00 2019-01-02 16:23:00 สิงห์บุรี       Sing Buri       \n 9   600643 2019-01-01 00:40:00 2019-01-11 10:01:00 สงขลา       Songkhla        \n10   599105 2019-01-01 00:45:00 2019-01-01 10:11:00 ตราด        Trat            \n# ℹ 81,366 more rows\n# ℹ 15 more variables: agency <chr>, route <chr>, vehicle_type <chr>,\n#   presumed_cause <chr>, accident_type <chr>,\n#   number_of_vehicles_involved <dbl>, number_of_fatalities <dbl>,\n#   number_of_injuries <dbl>, weather_condition <chr>, road_description <chr>,\n#   slope_description <chr>, Month_num <dbl>, Month_fac <ord>, dayofweek <int>,\n#   geometry <POINT [m]>\n```\n\n\n:::\n:::\n\n\n\n\n### Selecting relevant columns\n\n1.  **`acc_code`**: Unique identifier for each accident. Useful for tracking individual incidents.\n\n2.  **`incident_datetime`**: Date and time of the accident. Important for temporal analysis (e.g., analyzing accidents by time of day or day of the week).\n\n3.  **`province_en`**: The province where the accident occurred. You’ll need this to filter accidents within the Bangkok Metropolitan Region (BMR).\n\n4.  **`vehicle_type`**: The type of vehicles involved in the accident. This is useful for understanding vehicle-specific trends in accidents.\n\n5.  **`presumed_cause`**: The suspected cause of the accident. This helps with behavioral analysis and understanding the major factors contributing to accidents.\n\n6.  **`accident_type`**: Type of accident (e.g., collision, rollover). This helps categorize the nature of accidents.\n\n7.  **`number_of_vehicles_involved`**: The number of vehicles involved. Useful for analyzing accident severity.\n\n8.  **`number_of_fatalities`**: The number of fatalities in the accident. Important for assessing the severity and impact of accidents.\n\n9.  **`number_of_injuries`**: The number of injuries in the accident. Another key factor for assessing the seriousness of accidents.\n\n10. **`weather_condition`**: Weather conditions at the time of the accident. Useful for understanding environmental factors affecting accidents.\n\n11. **`latitude` and `longitude`**: Coordinates of the accident location. These are crucial for spatial analysis, including mapping accidents and performing spatial joins with road networks.\n\n12. **`road_description`**: A description of the road (e.g., highway, intersection). Helps in identifying road-specific characteristics linked to accidents.\n\n13. **`slope_description`**: Description of the slope of the road. Useful for analyzing road conditions that may contribute to accidents.\n\n### Why These Columns?\n\n-   **Temporal Analysis**: `incident_datetime` will allow you to analyze patterns based on time (e.g., peak accident times or seasons).\n\n-   **Spatial Analysis**: `latitude` and `longitude` are essential for mapping the accident locations and performing spatial joins with your roads dataset.\n\n-   **Accident Characteristics**: Columns like `vehicle_type`, `presumed_cause`, `accident_type`, and `weather_condition` help you understand the types of accidents and contributing factors.\n\n-   **Severity Indicators**: `number_of_fatalities` and `number_of_injuries` help assess the severity of each accident.\n\n-   **Road Context**: `road_description` and `slope_description` provide additional context on road conditions that may influence accidents.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter the dataset to include only the relevant columns\naccidents_filtered <- acc %>%\n  dplyr::select(acc_code,\n                incident_datetime,\n                Month_num,\n                Month_fac,\n                dayofweek,\n                province_en,\n                vehicle_type,\n                presumed_cause,\n                accident_type,\n                number_of_vehicles_involved,\n                number_of_fatalities,\n                number_of_injuries,\n                weather_condition,\n                road_description,\n                slope_description,\n                geometry)\n\n# View the first few rows of the filtered dataset\nhead(accidents_filtered)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 15 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 386299.4 ymin: 1368107 xmax: 1130617 ymax: 2080805\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 16\n  acc_code incident_datetime   Month_num Month_fac dayofweek province_en        \n     <dbl> <dttm>                  <dbl> <ord>         <int> <chr>              \n1   571905 2019-01-01 00:00:00         1 Jan               1 Loburi             \n2  3790870 2019-01-01 00:03:00         1 Jan               1 Ubon Ratchathani   \n3   599075 2019-01-01 00:05:00         1 Jan               1 Prachuap Khiri Khan\n4   571924 2019-01-01 00:20:00         1 Jan               1 Chiang Mai         \n5   599523 2019-01-01 00:25:00         1 Jan               1 Nakhon Sawan       \n6   571982 2019-01-01 00:30:00         1 Jan               1 Mae Hong Son       \n# ℹ 10 more variables: vehicle_type <chr>, presumed_cause <chr>,\n#   accident_type <chr>, number_of_vehicles_involved <dbl>,\n#   number_of_fatalities <dbl>, number_of_injuries <dbl>,\n#   weather_condition <chr>, road_description <chr>, slope_description <chr>,\n#   geometry <POINT [m]>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n### Importing [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads)\n\nThe code chunk below uses *st_read()* function of **sf** package to import `hotosm_tha_roads_lines_shp` shapefile into R as a polygon feature data frame. \n\n::: panel-tabset\n### Objectives\n\nThe below code uses the following to:\n\n-   **`st_read()`**: Reads the Shapefile.\n\n-   **`st_crs()`**: Checks the CRS of the dataset.\n\n-   **`st_zm()`**: Removes unnecessary Z and M dimensions\n\n-   **`st_cast()`**: This function converts the geometries from **`MULTILINESTRING`** to **`LINESTRING`**, allowing you to handle each line individually.\n\n-   **`colSums(is.na(st_drop_geometry()))`**: Checks for missing values in attribute columns (excluding geometries).\n\n-   **`st_is_valid()`**: Checks if the geometries are valid.\n\n-   **`st_make_valid()`**: Cleans invalid geometries if any exist.\n\n-   **`st_transform()`**: Transforms the dataset to **UTM Zone 47N (EPSG:32647)** for better spatial accuracy in Thailand.\n\n-   **`drop_na()`**: Removes rows with missing values in attributes.\n\n-   **`summary()`**: Provides a summary of the cleaned dataset.\n\n### The code\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read only necessary columns (adjust column names as needed)\nroads_raw <- st_read(\"Data/rawdata/hotosm_tha_roads_lines_shp.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `hotosm_tha_roads_lines_shp' from data source \n  `C:\\gniyuy\\ISSS626_GA\\Take-home_Ex\\Take-home_Ex01\\Data\\rawdata\\hotosm_tha_roads_lines_shp.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2792361 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 97.34457 ymin: 5.643645 xmax: 105.6528 ymax: 20.47168\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check CRS\nprint(st_crs(roads_raw))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n\n```{.r .cell-code}\n# Remove Z and M dimensions from the roads dataset\nroads_raw <- st_zm(roads_raw, drop = TRUE, what = \"ZM\")\n\n# Ensure MULTILINESTRING is converted to LINESTRING\n# Explode MULTILINESTRING into individual LINESTRING geometries\nroads_raw <- st_cast(roads_raw, \"LINESTRING\", group_or_split = TRUE)\n\n# Check for invalid geometries\ninvalid_count <- sum(!st_is_valid(roads_raw))\nprint(paste(\"Number of invalid geometries:\", invalid_count))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Number of invalid geometries: 0\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Clean and transform data\nroads_cleaned <- roads_raw %>%\n  {if(invalid_count > 0) st_make_valid(.) else .} %>%\n  st_transform(crs = 32647)\n\n# Provide a summary of the cleaned dataset\nprint(\"Summary of the cleaned dataset:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary of the cleaned dataset:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(roads_cleaned)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     name             name_en            highway            surface         \n Length:2792362     Length:2792362     Length:2792362     Length:2792362    \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n  smoothness           width              lanes              oneway         \n Length:2792362     Length:2792362     Length:2792362     Length:2792362    \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    bridge             layer              source            name_th         \n Length:2792362     Length:2792362     Length:2792362     Length:2792362    \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n     osm_id            osm_type                  geometry      \n Min.   :4.271e+06   Length:2792362     LINESTRING   :2792362  \n 1st Qu.:5.269e+08   Class :character   epsg:32647   :      0  \n Median :6.296e+08   Mode  :character   +proj=utm ...:      0  \n Mean   :6.896e+08                                             \n 3rd Qu.:9.353e+08                                             \n Max.   :1.316e+09                                             \n```\n\n\n:::\n:::\n\n\n\n\n### Selecting relevant columns\n\nFrom the columns in `roads_cleaned` dataset, the following would be most relevant to the project and can be retained:\n\n1.  `name_en`: The English name of the road can be helpful for reference.\n\n2.  `highway`: Indicates the road type, which can be essential for understanding traffic and accident patterns.\n\n3.  `surface`: Useful to assess the condition of roads.\n\n4.  `lanes`: Important for analyzing road capacity and traffic accidents.\n\n5.  `oneway`: Indicates whether the road is one-way, which could be relevant to accidents.\n\n6.  `bridge`: Useful for identifying structural elements that may influence accident frequency.\n\n7.  `layer`: Might be important if there are stacked roads or complex intersections.\n\n8.  `osm_id`: Identifier for each road segment (important for spatial joins or linking).\n\n9.  `osm_type`: Type of OpenStreetMap object (likely useful for analysis).\n\n10. `geometry`: Necessary for spatial analysis and mapping.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroads_filtered <- roads_cleaned %>%\n  dplyr::select(name_en, highway, surface, lanes, oneway, bridge, layer, osm_id, osm_type, geometry)\n```\n:::\n\n\n\n:::\n\n### Importing [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?)\n\nThe code chunk below uses *st_read()* function of **sf** package to import `tha_adm_rtsd_itos_20210121_SHP` shapefile into R as a polygon feature data frame. \n\n::: panel-tabset\n### Objectives\n\nThe below code uses the following to:\n\n-   **`st_read()`**: Reads the Shapefile for the administrative boundaries of Thailand\n\n-   **`st_crs()`**: Checks the Coordinate Reference System of the dataset\n\n-   **`st_geometry_type()`**: Identifies the geometry type (e.g., polygons, points, etc.)\n\n-   **`st_bbox()`**: Displays the bounding box (extent) of the dataset\n\n-   **`colSums(is.na(st_drop_geometry()))`**: Calculates the number of missing values in each attribute column (non-geometry columns)\n\n-   **`st_is_valid()`**: Checks if there are any invalid geometries in the dataset\n\n-   **`st_make_valid()`**: Cleans invalid geometries, if any exist\n\n-   **`st_transform(crs = 32647)`**: Transforms the dataset to **UTM Zone 47N (EPSG:32647)** for spatial accuracy in Thailand\n\n-   **`drop_na()`**: Removes rows where any attribute columns contain missing values\n\n-   **`summary()`**: Provides a summary of the final cleaned dataset, including both attribute data and geometries\n\n### The code\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read the data\nadmin_boundaries_raw <- st_read(\"Data/rawdata/tha_admbnda_adm2_rtsd_20220121.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm2_rtsd_20220121' from data source \n  `C:\\gniyuy\\ISSS626_GA\\Take-home_Ex\\Take-home_Ex01\\Data\\rawdata\\tha_admbnda_adm2_rtsd_20220121.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 928 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check Geospatial Properties\nprint(\"Geospatial Properties:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Geospatial Properties:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(st_crs(admin_boundaries_raw))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(st_geometry_type(admin_boundaries_raw))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n  [6] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [11] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [16] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [21] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [26] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [31] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [36] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [41] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [46] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [51] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [56] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [61] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [66] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [71] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [76] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [81] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [86] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [91] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [96] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[101] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[106] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[111] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[116] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[121] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[126] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[131] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[136] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[141] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[146] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[151] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[156] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[161] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[166] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[171] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[176] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[181] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[186] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[191] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[196] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[201] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[206] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[211] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[216] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[221] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[226] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[231] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[236] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[241] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[246] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[251] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[256] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[261] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[266] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[271] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[276] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[281] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[286] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[291] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[296] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[301] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[306] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[311] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[316] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[321] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[326] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[331] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[336] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[341] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[346] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[351] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[356] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[361] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[366] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[371] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[376] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[381] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[386] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[391] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[396] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[401] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[406] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[411] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[416] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[421] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[426] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[431] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[436] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[441] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[446] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[451] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[456] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[461] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[466] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[471] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[476] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[481] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[486] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[491] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[496] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[501] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[506] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[511] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[516] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[521] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[526] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[531] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[536] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[541] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[546] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[551] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[556] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[561] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[566] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[571] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[576] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[581] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[586] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[591] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[596] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[601] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[606] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[611] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[616] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[621] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[626] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[631] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[636] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[641] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[646] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[651] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[656] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[661] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[666] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[671] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[676] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[681] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[686] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[691] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[696] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[701] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[706] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[711] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[716] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[721] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[726] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[731] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[736] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[741] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[746] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[751] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[756] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[761] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[766] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[771] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[776] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[781] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[786] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[791] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[796] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[801] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[806] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[811] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[816] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[821] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[826] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[831] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[836] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[841] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[846] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[851] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[856] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[861] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[866] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[871] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[876] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[881] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[886] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[891] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[896] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[901] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[906] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[911] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[916] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[921] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[926] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n18 Levels: GEOMETRY POINT LINESTRING POLYGON MULTIPOINT ... TRIANGLE\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(st_bbox(admin_boundaries_raw))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      xmin       ymin       xmax       ymax \n 97.343358   5.613038 105.636965  20.465074 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Remove Z and M dimensions from the admin boundaries dataset\nadmin_boundaries_raw <- st_zm(admin_boundaries_raw, drop = TRUE, what = \"ZM\")\n\n# Check for Invalid Geometries\ninvalid_count <- sum(!st_is_valid(admin_boundaries_raw))\nprint(paste(\"Number of invalid geometries:\", invalid_count))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Number of invalid geometries: 0\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Clean and Transform Data\nadmin_boundaries_cleaned <- admin_boundaries_raw %>%\n  st_transform(crs = 32647) \n\n# Provide Summary of the Cleaned Dataset\nprint(\"Summary of the cleaned dataset:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary of the cleaned dataset:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(admin_boundaries_cleaned)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Shape_Leng        Shape_Area          ADM2_EN            ADM2_TH         \n Min.   :0.05123   Min.   :0.0001177   Length:928         Length:928        \n 1st Qu.:0.86613   1st Qu.:0.0195873   Class :character   Class :character  \n Median :1.22369   Median :0.0379046   Mode  :character   Mode  :character  \n Mean   :1.31536   Mean   :0.0467710                                        \n 3rd Qu.:1.68395   3rd Qu.:0.0629092                                        \n Max.   :4.34007   Max.   :0.4075191                                        \n  ADM2_PCODE          ADM2_REF          ADM2ALT1EN         ADM2ALT2EN       \n Length:928         Length:928         Length:928         Length:928        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n  ADM2ALT1TH         ADM2ALT2TH          ADM1_EN            ADM1_TH         \n Length:928         Length:928         Length:928         Length:928        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n  ADM1_PCODE          ADM0_EN            ADM0_TH           ADM0_PCODE       \n Length:928         Length:928         Length:928         Length:928        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      date               validOn              validTo          \n Min.   :2019-02-18   Min.   :2022-01-22   Min.   :-001-11-30  \n 1st Qu.:2019-02-18   1st Qu.:2022-01-22   1st Qu.:-001-11-30  \n Median :2019-02-18   Median :2022-01-22   Median :-001-11-30  \n Mean   :2019-02-18   Mean   :2022-01-22   Mean   :-001-11-30  \n 3rd Qu.:2019-02-18   3rd Qu.:2022-01-22   3rd Qu.:-001-11-30  \n Max.   :2019-02-18   Max.   :2022-01-22   Max.   :-001-11-30  \n          geometry  \n MULTIPOLYGON :928  \n epsg:32647   :  0  \n +proj=utm ...:  0  \n                    \n                    \n                    \n```\n\n\n:::\n:::\n\n\n\n\n### Selecting relevant columns\n\nThe following columns that provide information on the administrative area can be retained, such as:\n\n-   `ADM2_EN` (English name of the second-level administrative boundary)\n\n-   `ADM1_EN` (English name of the first-level boundary, e.g., province)\n\n-   `ADM0_EN` (country name)\n\n-   `ADM2_PCODE` (second-level administrative boundary code)\n\n-   `geometry` (spatial information in MULTIPOLYGON format)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmin_boundaries_filtered <- admin_boundaries_cleaned %>%\n  dplyr::select(ADM2_EN, ADM1_EN, ADM0_EN, ADM2_PCODE, geometry)\n```\n:::\n\n\n\n:::\n\n:::\n\n### Define and filter [Bangkok Metropolitan Region (BMR)](https://en.wikipedia.org/wiki/Bangkok_Metropolitan_Region)\n\nThe **Bangkok Metropolitan Region (BMR)** consists of six key provinces located in the central part of Thailand. These provinces include:\n\n-   **Bangkok (Metropolis)**,\n\n-   **Nonthaburi**,\n\n-   **Samut Prakan**,\n\n-   **Pathum Thani**,\n\n-   **Samut Sakhon**, and\n\n-   **Nakhon Pathom**.\n\nTogether, these regions represent the most urbanized and densely populated areas in Thailand. Bangkok serves as the central hub, with surrounding provinces supporting residential, commercial, and industrial activities. The BMR plays a crucial role in Thailand’s economy, infrastructure, and governance, making it a significant focal point for urban planning and transportation networks.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List of provinces in Bangkok Metropolitan Region (BMR)\nbmr_provinces <- c(\"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\")\n```\n:::\n\n\n\n\nFirstly, let's filter `acc` dataset to consist accidents only of BMR provinces.\n\nOnce the filter is applied, we can inspect the filtered dataset using `head(accidents_bmr)` to verify that only accidents from the BMR provinces are included.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter the accident dataset for only BMR provinces\naccidents_bmr <- accidents_filtered %>%\n  filter(province_en %in% bmr_provinces)\n\n# View the filtered dataset\nhead(accidents_bmr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 15 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 627012.3 ymin: 1502876 xmax: 693488.9 ymax: 1533381\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 16\n  acc_code incident_datetime   Month_num Month_fac dayofweek province_en  \n     <dbl> <dttm>                  <dbl> <ord>         <int> <chr>        \n1   571882 2019-01-01 02:25:00         1 Jan               1 Nakhon Pathom\n2   600001 2019-01-01 03:00:00         1 Jan               1 Nonthaburi   \n3   605043 2019-01-01 03:00:00         1 Jan               1 Samut Prakan \n4   629691 2019-01-01 03:05:00         1 Jan               1 Bangkok      \n5   571887 2019-01-01 04:30:00         1 Jan               1 Nakhon Pathom\n6   599234 2019-01-01 04:45:00         1 Jan               1 Samut Prakan \n# ℹ 10 more variables: vehicle_type <chr>, presumed_cause <chr>,\n#   accident_type <chr>, number_of_vehicles_involved <dbl>,\n#   number_of_fatalities <dbl>, number_of_injuries <dbl>,\n#   weather_condition <chr>, road_description <chr>, slope_description <chr>,\n#   geometry <POINT [m]>\n```\n\n\n:::\n:::\n\n\n\n\nIn this step, we utilize the **Thailand Administrative Boundaries dataset**, which contains detailed geospatial information for all provinces in Thailand. By applying a filter, the dataset is restricted to the six provinces within the Bangkok Metropolitan Region (BMR). This process ensures that the analysis only focuses on these regions, excluding other areas of Thailand. By isolating the BMR boundaries, further geospatial analyses—such as spatial joins and road infrastructure studies—can be accurately conducted within this concentrated urban zone.\n\nWe verify the class of 'admin_boundaries_filtered'.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(admin_boundaries_filtered)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter the 'admin_boundaries_cleaned' dataset to keep only BMR provinces\nadmin_boundaries_bmr <- admin_boundaries_filtered %>%\n  filter(ADM1_EN %in% bmr_provinces)\n```\n:::\n\n\n\n\nThe **Thailand Roads dataset** is a comprehensive geospatial dataset that details the road networks throughout the country. After reading the dataset, a spatial join is performed to integrate the filtered BMR administrative boundaries with the roads data. This spatial join ensures that only the road segments located within the defined BMR boundaries are retained for analysis. This step is crucial for focusing the study on the traffic networks within the Bangkok Metropolitan Region, allowing for specific analyses such as traffic flow, accident-prone areas, and infrastructure planning within the urban and suburban contexts of the BMR.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Create a bounding box for the BMR area\nbmr_bbox <- st_bbox(admin_boundaries_bmr)\n\n# Step 2: Simplify the BMR boundaries for faster processing\nadmin_boundaries_bmr_simplified <- st_simplify(admin_boundaries_bmr, dTolerance = 100)\n\n# Step 3: Use st_crop to pre-filter roads based on the bounding box (faster)\nroads_filtered_bbox <- st_crop(roads_filtered, bmr_bbox)\n\n# Step 4: Perform the spatial join with the filtered roads\nroads_bmr <- st_join(roads_filtered, admin_boundaries_bmr_simplified, join = st_within, left = FALSE)\n```\n:::\n\n\n\n\n## Plotting the Geospatial Data\n\nHere’s how to we can plot the `accidents_bmr`, `admin_boundaries_bmr`, and `roads_bmr` using tmap.\n\nAs before, we need to ensure that the `accidents_bmr`, `admin_boundaries_bmr`, and `roads_bmr` datasets are all in the same CRS.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmin_boundaries_bmr <- st_transform(admin_boundaries_bmr, crs = 32647)\nroads_bmr <- st_transform(roads_bmr, crs = 32647)\naccidents_bmr <- st_transform(accidents_bmr, crs = 32647)\n```\n:::\n\n\n\n\nWe can then create a thematic map with `tmap`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a thematic map with tmap\ntm_shape(admin_boundaries_bmr_simplified) +   \n  tm_borders(lwd = 1.5, col = \"black\") +   \n  tm_shape(roads_bmr) +         \n  tm_lines(col = \"brown\", lwd = 0.5) +     \n  tm_shape(accidents_bmr) +         \n  tm_dots(col = \"number_of_fatalities\",    \n          palette = \"Reds\", \n          size = 0.1, \n          title = \"Fatalities\") +             \n  tm_layout(title = \"Road Accidents in Bangkok Metropolitan Region (BMR)\",\n            legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n\n### Spatial Distribution of Road Fatalities in Bangkok Metropolitan Region\n\nTo display the number of fatalities in each region, we will calculate the total number of fatalities for each administrative region and then update the map to reflect this in the tm_fill() function. Here's how we can proceed:\n\n**Step 1: Aggregate the number of fatalities per region**\n\nWe will group `accident` data by region and sum the number of fatalities for each region.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to a regular data frame\naccidents_bmr_df <- as.data.frame(accidents_bmr)\n\n# Rename the column\naccidents_bmr_df <- accidents_bmr_df %>%\n  dplyr:::rename.data.frame(ADM1_EN = province_en)\n\n# Convert back to an sf object\naccidents_bmr <- st_as_sf(accidents_bmr_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregate fatalities by region\nfatalities_by_region <- accidents_bmr %>%\n  group_by(ADM1_EN) %>%\n  summarise(total_fatalities = sum(number_of_fatalities, na.rm = TRUE))\n```\n:::\n\n\n\n\n**Step 2: Join this aggregated data with your boundaries data**\n\nNext, join the aggregated fatalities data to your BMR boundaries:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert fatalities_by_region to a regular data frame if needed\nfatalities_by_region_df <- as.data.frame(fatalities_by_region)\n\n# Perform a non-spatial left join to join the data with your boundaries\nadmin_boundaries_bmr <- admin_boundaries_bmr_simplified %>%\n  left_join(fatalities_by_region_df, by = \"ADM1_EN\")\n```\n:::\n\n\n\n\n**Step 3: Update map to show the number of fatalities**\n\nNow, modify the `tm_fill()` function to reflect the total fatalities in each region:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a thematic map showing the number of fatalities per region\ntm_shape(admin_boundaries_bmr) +\n  tm_fill(col = \"total_fatalities\",  # Column to display\n          palette = \"Reds\",          # Color palette\n          title = \"Total Fatalities\") + # Legend title\n  tm_borders() +\n  tm_shape(accidents_bmr) +\n  tm_dots(size = 0.1, col = \"red\") +\n  tm_layout(title = \"Total Fatalities in BMR\",\n            legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n\nThe thematic map produced displays the **total fatalities** across the **BMR**, with the number of fatalities color-coded by region. The red dots represent individual accident locations, and the underlying color gradient indicates the total fatalities aggregated by region.\n\n**Key Observations:**\n\n1.  **High Fatality Regions:**\n\n    -   The northern and central parts of the BMR, particularly in regions like **Pathum Thani**, **Nonthaburi**, and parts of **Bangkok**, are represented with darker shades of red, indicating these areas have the highest total fatalities, ranging from **200 to 250**. These areas tend to have densely concentrated accident points, likely due to heavy traffic and urban congestion.\n\n    **Moderate Fatality Regions:**\n\n    -   The **central and eastern parts** of **Bangkok** and **Samut Prakan** show a moderate number of total fatalities, represented by shades between **150 to 200**. This indicates moderately high accident fatalities but still lower than the most affected regions.\n\n    **Low Fatality Regions:**\n\n    -   The southern regions, such as **Samut Sakhon**, have relatively lower total fatalities, indicated by lighter shades of red. This could be due to less population density or fewer major roads compared to central areas.\n\n    These observations highlight the correlation between urban density, road network complexity, and accident fatalities across different regions of the BMR.\n\nLet's investigate the underlying causes of road accidents in these regions. Here could be some of the reasons:\n\n-   **Risk Behaviors in Different Travel Modes**: A study conducted in the BMR highlights that different modes of travel, such as motorcycles, cars, and public transportation, carry varying levels of risk perception. Vulnerable road users like pedestrians and cyclists tend to be more aware of risky behaviors than those driving cars or motorcycles. This is crucial since most accidents in Bangkok involve motorcycles, which are more vulnerable to high fatality rates​ ([Structurae](https://structurae.net/en/literature/journal-article/analysis-of-road-users-risk-behaviors-in-different-travel-modes-the-bangkok-metropolitan-region-thailand)).\n\n-   **Weather conditions:** It does have a significant impact on road accidents in the BMR. Rain, in particular, leads to increased risks due to slippery roads and reduced visibility. Heavy rainfall can cause dangerous driving conditions such as hydroplaning and longer braking distances, which lead to higher accident rates. Furthermore, flooding, which is common in Bangkok during monsoon seasons, exacerbates these dangers by making certain roads impassable or more dangerous to navigate, leading to crashes or vehicle damage ([MDPI](https://www.mdpi.com/2412-3811/8/4/79)).\n\n-   **Seasonal Accident Trends**: The number of accidents in Thailand tends to spike during specific periods like the New Year and Songkran festivals. While accident rates have gradually decreased over the years, the high involvement of motorcycles remains a constant challenge. Studies report that nearly 80% of accidents during these peak periods involve motorcycles, further highlighting the vulnerability of two-wheeler users ​([ThaiWebsites](https://www.thaiwebsites.com/caraccidents.asp)).\n\n-   **Contributing Factors**: Key factors like road design, driver behavior, and enforcement of traffic laws play significant roles in accidents. In Bangkok, accidents tend to occur more frequently on straight road sections​ ([ThaiWebsites](https://www.thaiwebsites.com/caraccidents.asp)). This is compounded by driver fatigue, drug use, and reckless driving, which are common causes of accidents​ ([Structurae](https://structurae.net/en/literature/journal-article/analysis-of-road-users-risk-behaviors-in-different-travel-modes-the-bangkok-metropolitan-region-thailand)).\n\n## Visualizing Spatio-Temporal Dynamics of Road Accidents\n\n### Risk Behaviors in Different Travel Modes\n\n**Classify the different travel modes**\n\n-   **Identify modes of transport**: Use the column in your accident data that lists vehicle types (e.g., \"vehicle_type\").\n\n-   **Filter for key modes**: Extract data for motorcycles, cars, and public transport. This will allow you to isolate accidents involving these different modes of travel.\n\n-   **Geospatial Analysis**: Using the boundaries and road network, spatially analyze where accidents involving motorcycles, cars, and public transport occur. This can highlight spatial patterns of risk behavior for each mode.\n\nUse `filter` in R to classify accidents based on vehicle types:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reclassify vehicle types based on the image into distinct categories\npickup_truck_accidents <- filter(accidents_bmr, vehicle_type %in% c(\"4-wheel pickup truck\", \"passenger pickup truck\"))\nlight_truck_accidents <- filter(accidents_bmr, vehicle_type %in% c(\"6-wheel truck\", \"7-10-wheel truck\"))\nheavy_truck_accidents <- filter(accidents_bmr, vehicle_type %in% c(\"large truck with trailer\", \"tractor/agricultural vehicle\"))\nmotorcycle_accidents <- filter(accidents_bmr, vehicle_type == \"motorcycle\")\ncar_accidents <- filter(accidents_bmr, vehicle_type %in% c(\"private/passenger car\", \"van\"))\nbus_accidents <- filter(accidents_bmr, vehicle_type == \"large passenger vehicle\")\nbicycle_accidents <- filter(accidents_bmr, vehicle_type == \"bicycle\")\npedestrian_accidents <- filter(accidents_bmr, vehicle_type == \"pedestrian\")\nother_accidents <- filter(accidents_bmr, vehicle_type %in% c(\"motorized tricycle\", \"other\"))\n```\n:::\n\n\n\n\n**Identify High-Risk Road Sections:**\n\n-   **Spatial point pattern analysis**: Examine **accident hotspots** for each travel mode using Kernel Density Estimation (KDE). This can reveal high-risk road sections for different travel modes.\n-   **Overlay accidents on road network**: Use the **road data** (e.g., road type, surface quality, width) to analyze how specific road conditions impact accident risk for different modes.\n\n**Car accidents**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure Car accidents are an sf object\ncar_accidents_sf <- st_as_sf(car_accidents)\n\ntm_shape(admin_boundaries_bmr_simplified) +  # BMR boundaries\n  tm_borders(lwd = 1.5, col = \"black\") +  # Add borders for the regions\n  tm_fill(col = \"ADM1_EN\", palette = \"Set3\", title = \"BMR Regions\") +  # Fill regions by name\n  tm_shape(car_accidents_sf) +  # Add car accident points\n  tm_dots(col = \"red\", size = 0.1) +  # Red dots for accident locations\n  tm_shape(roads_bmr) +  # Add road network (no tm_raster, as it's a line)\n  tm_lines(col = \"brown\", lwd = 0.01, alpha = 0.1) +  \n  tm_layout(title = \"Car Accident in BMR\", legend.outside = TRUE)  # Layout settings\n```\n:::\n\n\n\n\n**Pickup Truck accidents**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure Pickup Truck accidents are an sf object\npickup_truck_accidents_sf <- st_as_sf(pickup_truck_accidents)\n\ntm_shape(admin_boundaries_bmr_simplified) +  # BMR boundaries\n  tm_borders(lwd = 1.5, col = \"black\") +  # Add borders for the regions\n  tm_fill(col = \"ADM1_EN\", palette = \"Set3\", title = \"BMR Regions\") +  # Fill regions by name\n  tm_shape(pickup_truck_accidents_sf) +  # Add pick up truck accident points\n  tm_dots(col = \"red\", size = 0.1) +  # Red dots for accident locations\n  tm_shape(roads_bmr) +  # Add road network (no tm_raster, as it's a line)\n  tm_lines(col = \"brown\", lwd = 0.01, alpha = 0.1) +  \n  tm_layout(title = \"Pickup Truck Accident in BMR\", legend.outside = TRUE)  # Layout settings\n```\n:::\n\n\n\n\n**Motorcycle accidents**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure motorcycle accidents are an sf object\nmotorcycle_accidents_sf <- st_as_sf(motorcycle_accidents)\n\ntm_shape(admin_boundaries_bmr_simplified) +  # BMR boundaries\n  tm_borders(lwd = 1.5, col = \"black\") +  # Add borders for the regions\n   tm_fill(col = \"ADM1_EN\", palette = \"Set3\", title = \"BMR Regions\") +  # Fill regions by name\n  tm_shape(motorcycle_accidents_sf) +  # Add motorcycle accident points\n  tm_dots(col = \"red\", size = 0.1) +  # Red dots for accident locations\n  tm_shape(roads_bmr) +  # Add road network (no tm_raster, as it's a line)\n  tm_lines(col = \"brown\", lwd = 0.01, alpha = 0.1) +  \n  tm_layout(title = \"Motorcycle Accident in BMR\", legend.outside = TRUE)  # Layout settings\n```\n:::\n\n\n\n\nThe analysis of the top three vehicle types involved in accidents in the BMR is as follows:\n\n1.  **Cars**:\n\n    -   Private or passenger cars constitute the largest portion of vehicles involved in accidents. This finding is consistent with the high prevalence of private cars on the road. In urban environments like Bangkok, car congestion, driver distractions, and speeding could all contribute to the higher accident rate. The dense traffic conditions and complex road networks, including narrow streets and frequent intersections, could lead to a higher likelihood of collisions involving passenger vehicles.\n\n2.  **Pickup Truck accidents**:\n\n    -   Pickup trucks come in second. Pickup trucks are popular for both personal and commercial use in Thailand, making them a significant part of road traffic. Their larger size compared to private cars can also be a factor in more severe accidents, particularly in high-speed zones or when maneuvering through tight urban roads. Furthermore, the high usage of pickup trucks for goods transportation, often overloaded, can increase risks, especially on highways or rural roads leading into the metropolitan area.\n\n3.  **Motorcycles**:\n\n    -   Motorcycles rank third. Despite being the third most common type in the dataset, motorcycles are particularly vulnerable due to the lack of protective barriers for the driver and passengers. In many cases, motorcycle accidents result in higher fatality rates compared to cars or trucks. The high number of motorcycles on the road in Bangkok, combined with factors like weaving through traffic, poor visibility in certain weather conditions, and risky driving behavior, may explain their high involvement in road accidents.\n\nThe dominance of private cars, pickup trucks, and motorcycles in accident statistics underscores the need for targeted safety measures. For private cars and pickup trucks, enhancing road infrastructure, promoting safer driving practices, and enforcing traffic laws are essential. For motorcycles, encouraging the use of protective gear, increasing awareness about the dangers of risky driving behaviors, and developing safer motorcycle lanes could help reduce accidents and fatalities. Additionally, analyzing accident hotspots and times (such as peak traffic hours) could provide insights for reducing accident rates among these top vehicle types.\n\n### Weather conditions\n\n#### Spatial Distribution by Weather Condition\n\nWe overlay traffic accidents filtered by weather conditions (clear, dark, rainy, etc.) on the BMR map, showing which regions experience higher fatalities or injuries under different weather conditions.\n\n-   **Use filtering**: Filter accidents by weather conditions in your dataset.\n\n-   **Dot maps**: Overlay dots representing accidents on the BMR map, colored by weather condition.\n\n**By number of accidents**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter accidents based on weather conditions\nclear_accidents <- filter(accidents_bmr, weather_condition == \"clear\")\nrainy_accidents <- filter(accidents_bmr, weather_condition == \"rainy\")\ndark_accidents <- filter(accidents_bmr, weather_condition == \"dark\")\nfoggy_accidents <- filter(accidents_bmr, weather_condition == \"foggy\")\nlandslide_accidents <- filter(accidents_bmr, weather_condition == \"land slide\")\nnatural_disaster_accidents <- filter(accidents_bmr, weather_condition == \"natural disaster\")\nother_accidents <- filter(accidents_bmr, weather_condition == \"other\")\n\n# Create map combining regions, roads, and weather conditions\ntm_shape(admin_boundaries_bmr_simplified) + \n  # Fill regions by name\n  tm_fill(col = \"ADM1_EN\", palette = \"Set3\", title = \"BMR Regions\") + \n  tm_borders() + \n  \n  # Add roads\n  tm_shape(roads_bmr) +  # Add road network (no tm_raster, as it's a line)\n  tm_lines(col = \"brown\", lwd = 0.01, alpha = 0.1) +\n  \n  # Plot accidents for each weather condition with different colors\n  tm_shape(clear_accidents) +\n  tm_dots(col = \"blue\", size = 0.1, alpha = 0.7) +\n  \n  tm_shape(rainy_accidents) +\n  tm_dots(col = \"red\", size = 0.1, alpha = 0.7) +\n  \n  tm_shape(dark_accidents) +\n  tm_dots(col = \"black\", size = 0.1, alpha = 0.7) +\n  \n  tm_shape(foggy_accidents) +\n  tm_dots(col = \"purple\", size = 0.1, alpha = 0.7) +\n  \n  tm_shape(landslide_accidents) +\n  tm_dots(col = \"green\", size = 0.1, alpha = 0.7) +\n  \n  tm_shape(natural_disaster_accidents) +\n  tm_dots(col = \"orange\", size = 0.1, alpha = 0.7) +\n  \n  tm_shape(other_accidents) +\n  tm_dots(col = \"yellow\", size = 0.1, alpha = 0.7) +\n  \n  # Add a custom legend for weather conditions\n  tm_add_legend(type = \"symbol\",\n                col = c(\"blue\", \"red\", \"black\", \"purple\", \"green\", \"orange\", \"yellow\"),\n                labels = c(\"Clear\", \"Rainy\", \"Dark\", \"Foggy\", \"Landslide\", \"Natural Disaster\", \"Other\"),\n                title = \"Weather Conditions\") +\n  \n  # Layout settings\n  tm_layout(title = \"Traffic Accidents by Weather in BMR with Regions and Roads\", \n            legend.outside = TRUE,\n            legend.outside.position = \"right\")\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n\n**By number of fatalities**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create map for fatalities\ntm_shape(admin_boundaries_bmr_simplified) + \n  # Fill regions by name\n  tm_fill(col = \"ADM1_EN\", palette = \"Set3\", title = \"BMR Regions\") + \n  tm_borders() + \n  \n  # Add roads\n  tm_shape(roads_bmr) +  # Add road network (no tm_raster, as it's a line)\n  tm_lines(col = \"brown\", lwd = 0.01, alpha = 0.1) + \n\n  # Plot accidents with fatalities for each weather condition\n  tm_shape(clear_accidents) +\n  tm_dots(size = \"number_of_fatalities\", col = \"blue\", title = \"Clear Weather (Fatalities)\") +\n  \n  tm_shape(rainy_accidents) +\n  tm_dots(size = \"number_of_fatalities\", col = \"red\", title = \"Rainy Weather (Fatalities)\") +\n  \n  tm_shape(dark_accidents) +\n  tm_dots(size = \"number_of_fatalities\", col = \"black\", title = \"Dark Weather (Fatalities)\") +\n  \n  tm_shape(foggy_accidents) +\n  tm_dots(size = \"number_of_fatalities\", col = \"purple\", title = \"Foggy Weather (Fatalities)\") +\n  \n  tm_shape(landslide_accidents) +\n  tm_dots(size = \"number_of_fatalities\", col = \"green\", title = \"Landslide Weather (Fatalities)\") +\n  \n  tm_shape(natural_disaster_accidents) +\n  tm_dots(size = \"number_of_fatalities\", col = \"orange\", title = \"Natural Disaster (Fatalities)\") +\n\n  tm_shape(other_accidents) +\n  tm_dots(size = \"number_of_fatalities\", col = \"yellow\", title = \"Other Weather (Fatalities)\") +\n  \n  # Add a custom legend for weather conditions\n  tm_add_legend(type = \"symbol\",\n                col = c(\"blue\", \"red\", \"black\", \"purple\", \"green\", \"orange\", \"yellow\"),\n                labels = c(\"Clear\", \"Rainy\", \"Dark\", \"Foggy\", \"Landslide\", \"Natural Disaster\", \"Other\"),\n                title = \"Weather Conditions\") +\n  \n  # Layout settings\n  tm_layout(title = \"Fatalities by Weather in BMR with Regions and Roads\", \n            legend.outside = TRUE,\n            legend.outside.position = \"right\")\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n\n**By number of injuries**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create map for injuries\ntm_shape(admin_boundaries_bmr_simplified) + \n  # Fill regions by name\n  tm_fill(col = \"ADM1_EN\", palette = \"Set3\", title = \"BMR Regions\") + \n  tm_borders() + \n  \n  # Add roads\n  tm_shape(roads_bmr) +  # Add road network (no tm_raster, as it's a line)\n  tm_lines(col = \"brown\", lwd = 0.01, alpha = 0.1) + \n\n  # Plot accidents with injuries for each weather condition\n  tm_shape(clear_accidents) +\n  tm_dots(size = \"number_of_injuries\", col = \"blue\", title = \"Clear Weather (Injuries)\") +\n  \n  tm_shape(rainy_accidents) +\n  tm_dots(size = \"number_of_injuries\", col = \"red\", title = \"Rainy Weather (Injuries)\") +\n  \n  tm_shape(dark_accidents) +\n  tm_dots(size = \"number_of_injuries\", col = \"black\", title = \"Dark Weather (Injuries)\") +\n  \n  tm_shape(foggy_accidents) +\n  tm_dots(size = \"number_of_injuries\", col = \"purple\", title = \"Foggy Weather (Injuries)\") +\n  \n  tm_shape(landslide_accidents) +\n  tm_dots(size = \"number_of_injuries\", col = \"green\", title = \"Landslide Weather (Injuries)\") +\n  \n  tm_shape(natural_disaster_accidents) +\n  tm_dots(size = \"number_of_injuries\", col = \"orange\", title = \"Natural Disaster (Injuries)\") +\n\n  tm_shape(other_accidents) +\n  tm_dots(size = \"number_of_injuries\", col = \"yellow\", title = \"Other Weather (Injuries)\") +\n\n  # Add a custom legend for weather conditions\n  tm_add_legend(type = \"symbol\",\n                col = c(\"blue\", \"red\", \"black\", \"purple\", \"green\", \"orange\", \"yellow\"),\n                labels = c(\"Clear\", \"Rainy\", \"Dark\", \"Foggy\", \"Landslide\", \"Natural Disaster\", \"Other\"),\n                title = \"Weather Conditions\") +\n  \n  # Layout settings\n  tm_layout(title = \"Fatalities by Weather in BMR with Regions and Roads\", \n            legend.outside = TRUE,\n            legend.outside.position = \"right\")\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Temporal Analysis\n\nWe analyze how the frequency of accidents varies across different times of day, months, or years for various weather conditions. This can be achieved by:\n\n-   **Aggregating accident data by time period** (hour, day, month, year) and weather condition.\n\n-   **Time-series plots**: Create time-series plots for each weather condition, showing the number of accidents over time.\n\n-   **Heatmaps**: Visualize accident frequencies across different times of day and months.\n\n**Step 1: Aggregating Accident Data by Time Period and Weather Condition**\n\nWe can aggregate the accident data by different time period such as hour, day, month, or year, and by weather condition.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregate data by month and weather condition\naccidents_by_month_weather <- accidents_bmr %>%\n  dplyr:::group_by.data.frame(Month_num, Month_fac, weather_condition) %>%\n  summarise(total_fatalities = sum(number_of_fatalities, na.rm = TRUE),\n            total_injuries = sum(number_of_injuries, na.rm = TRUE))\n\n# Aggregate by hour and weather condition\naccidents_by_hour_weather <- accidents_bmr %>%\n  mutate(hour = lubridate::hour(incident_datetime)) %>%\n  group_by(hour, weather_condition) %>%\n  summarise(total_fatalities = sum(number_of_fatalities, na.rm = TRUE),\n            total_injuries = sum(number_of_injuries, na.rm = TRUE))\n```\n:::\n\n\n\n\n**Step 2: Time-Series Plots for Each Weather Condition**\n\nWe can create time-series plots to visualize the number of accidents over time (for instance, by hour or month).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Time-series plot of accidents by month and weather condition\nggplot(accidents_by_month_weather, aes(x = Month_num, y = total_fatalities, color = weather_condition, group = weather_condition)) +\n  geom_line() +\n  labs(title = \"Monthly Accidents by Weather Condition\",\n       x = \"Month\", y = \"Number of Fatalities\") +\n  scale_x_continuous(breaks = 1:12, labels = unique(accidents_by_month_weather$Month)) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n\n**Step 3: Heatmaps to Visualize Accident Frequencies**\n\nWe can create heatmaps to visualize accident frequencies across different times of day and months.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Heatmap of accidents by hour and weather condition\nggplot(accidents_by_hour_weather, aes(x = hour, y = weather_condition, fill = total_fatalities)) +\n  geom_tile() +\n  labs(title = \"Accidents by Hour and Weather Condition\",\n       x = \"Hour\", y = \"Weather Condition\", fill = \"Fatalities\") +\n  scale_fill_viridis_c(option = \"C\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Combining Spatial & Temporal Analysis\n\nBelow shows how accidents evolve spatially over time under different weather conditions:\n\nEnsure the dataset includes a **temporal** component (e.g., month, year) and spatial geometry (`sf` object). You can modify your existing `accidents_bmr` dataset if it's not already in the correct format.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert 'incident_datetime' to date format if not already\naccidents_bmr <- accidents_bmr %>%\n  mutate(incident_datetime = as.POSIXct(incident_datetime, format = \"%m/%d/%Y %H:%M\"))\n\n# Add a 'month_year' column for easier temporal analysis\naccidents_bmr <- accidents_bmr %>%\n  mutate(month_year = format(incident_datetime, \"%Y-%m\"))\n\n# Ensure that the dataset is an sf object\naccidents_bmr_sf <- st_as_sf(accidents_bmr, coords = c(\"longitude\", \"latitude\"), crs = 4326)\n```\n:::\n\n\n\n\nWe can set up `tmap_animation()` to visualize the accident data across months or years while factoring in weather conditions.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Switch to view mode for interactive animations \ntmap_mode(\"view\")\n\n# Create the animated map\ntmap_animation(\n  tm_shape(accidents_bmr_sf) +  # Load accident data as sf object\n  tm_dots(col = \"weather_condition\", palette = \"Set1\", size = 0.1, title = \"Weather Conditions\") +\n  tm_facets(along = \"month_year\", free.coords = FALSE) +  # Create facets by month-year\n  tm_shape(admin_boundaries_bmr) +  # Add BMR boundaries\n  tm_borders(lwd = 1, col = \"black\") +  # Add boundaries outline\n  tm_layout(title = \"Accident Distribution Over Time by Weather Conditions in BMR\",\n            legend.outside = TRUE),  # Layout settings for the map\n  filename = \"accidents_bmr_animation.gif\",  # Save as gif\n  width = 800, height = 600, delay = 60  # Define gif size and frame delay\n)\n```\n:::\n\n\n\n\n![](accidents_bmr_animation.gif)\n\nFrom the analysis of the weather conditions and accidents in the BMR, we can observe a significant difference in the number of accidents under different weather conditions:\n\n1.  **Clear Weather**:\n\n    -   The vast majority of accidents, approximately 11,711 incidents, occur under clear weather conditions.\n\n    -   This indicates that even in optimal weather conditions with clear visibility and road conditions, accidents are still prevalent.\n\n    -   The map shows widespread distribution of these accidents across all regions of the BMR, with a noticeable concentration along major road networks and urban areas like Bangkok. The high volume of traffic and higher speed limits during clear weather may contribute to the increased number of accidents.\n\n2.  **Rainy Weather**:\n\n    -   The second most common weather condition associated with accidents is rainy weather, with 1,166 incidents.\n\n    -   Rain increases the risk of accidents due to factors such as reduced visibility, slippery roads, and longer stopping distances.\n\n    -   The map shows clusters of accidents during rainy weather, particularly along major highways and arterial roads. Regions like Pathum Thani and Samut Prakan appear to have a higher density of accidents in rainy conditions, which may be due to the poor drainage systems or high traffic flow.\n\n**Comparison:**\n\n-   **Clear vs. Rainy Conditions**:\n\n    -   While clear weather accounts for more accidents due to the higher volume of vehicles on the road and possibly higher speeds, rainy conditions present their own hazards. The number of accidents during rain, while lower, still shows that driving in adverse weather remains a significant risk factor, especially in certain regions.\n\n    -   Both conditions demonstrate the importance of maintaining road safety awareness regardless of weather, but special caution is needed during rain, as visibility and road conditions deteriorate.\n\n**Key Takeaways:**\n\n-   In clear weather, driver behavior such as speeding and not paying attention may be primary factors for accidents.\n\n-   In rainy weather, the road conditions become more challenging, and accidents might result from hydroplaning, reduced grip on the road, or poor visibility. It's important to enforce road safety laws and awareness campaigns to reduce accidents in both conditions.\n\nThe map visualizes how accidents are distributed based on weather conditions, helping to understand areas where interventions (like better road design or stricter enforcement) may be needed to reduce the risks.\n\n### Seasonal Accident Trends Analysis (New Year and Songkran Festivals)\n\n#### **Filter Accident Data for New Year and Songkran:**\n\nWe define the periods for the New Year and Songkran festivals in the dataset, then filter accidents that occurred during those times. The New Year generally spans from the 31st of December to the 2nd of January, and Songkran typically runs from the 13th to the 15th of April.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define New Year and Songkran periods\nnew_year_period <- c(\"12-31\", \"01-01\", \"01-02\")\nsongkran_period <- c(\"04-13\", \"04-14\", \"04-15\")\n\n# Convert incident_datetime to Date format and extract the month-day part for comparison\naccidents_bmr$month_day <- format(as.Date(accidents_bmr$incident_datetime), \"%m-%d\")\n\n# Filter for New Year accidents\nnew_year_accidents <- accidents_bmr %>% \n  filter(month_day %in% new_year_period)\n\n# Filter for Songkran accidents\nsongkran_accidents <- accidents_bmr %>% \n  filter(month_day %in% songkran_period)\n\n# Combine both festivals\nfestival_accidents <- bind_rows(new_year_accidents, songkran_accidents)\n\n# Summary statistics for both festivals\nfestival_summary <- festival_accidents %>%\n  group_by(vehicle_type) %>%\n  summarise(fatalities = sum(number_of_fatalities, na.rm = TRUE),\n            injuries = sum(number_of_injuries, na.rm = TRUE))\n```\n:::\n\n\n\n\n#### **Visualizing Accident Trends:**\n\nYou can create time-series plots to analyze accident trends during New Year and Songkran festivals for various vehicle types, particularly motorcycles, which are more involved in accidents during these periods.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualizing the time series trend of accidents during festivals by vehicle type\n\nlibrary(ggplot2)\n\nggplot(festival_accidents, aes(x = incident_datetime, fill = vehicle_type)) +\n  geom_histogram(binwidth = 86400) + # binwidth of one day\n  labs(title = \"Accident Trends During New Year and Songkran Festivals\",\n       x = \"Date\",\n       y = \"Number of Accidents\") +\n  theme_minimal() +\n  facet_wrap(~ vehicle_type)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\n\n#### **Heatmaps for Time of Day or Day of Week:**\n\nA heatmap can show accident frequencies during different times of the day or days of the week for these festival periods.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure incident_datetime is properly formatted and extract hour and day\nfestival_accidents$hour <- format(as.POSIXct(festival_accidents$incident_datetime), \"%H\")\nfestival_accidents$day <- format(as.POSIXct(festival_accidents$incident_datetime), \"%A\")\n\n# Convert hour and day to factors (if necessary)\nfestival_accidents$hour <- as.factor(festival_accidents$hour)\nfestival_accidents$day <- as.factor(festival_accidents$day)\n\n# Create a summary data frame with counts\naccident_summary <- festival_accidents %>%\n  group_by(hour, day) %>%\n  summarise(count = n(), .groups = 'drop')\n\n# Create the heatmap\nggplot(accident_summary, aes(x = hour, y = day, fill = count)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"lightblue\", high = \"darkblue\") +\n  labs(title = \"Accident Heatmap by Hour and Day During New Year and Songkran\",\n       x = \"Hour of the Day\",\n       y = \"Day of the Week\",\n       fill = \"Number of Accidents\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n\n#### **Mapping the Accidents (Spatial Distribution):**\n\nTo analyze spatial trends during the festivals, we map the accidents for New Year and Songkran festivals using tmap:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualize the accidents during festivals on a map\ntm_shape(admin_boundaries_bmr_simplified) + \n  tm_polygons() + \n  tm_shape(festival_accidents) +\n  tm_dots(col = \"vehicle_type\", palette = \"Set1\", title = \"Vehicle Type\") +\n  tm_layout(title = \"Accidents During Festivals (New Year & Songkran) in BMR\")\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n\n\n### Other Contributing Factors\n\n#### Road Design Analysis\n\nHere's how we can prepare, filter, and aggregate the accident data by road description, followed by combining this analysis with fatalities and injuries for each type of road.\n\n**Step 1: Aggregate Fatalities and Injuries by Road Type**\n\nNow, aggregate the number of fatalities and injuries for each type of road, similar to the table you shared.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregate fatalities and injuries by road type\nroad_aggregated <- accidents_bmr %>%\n  group_by(road_description) %>%\n  summarise(total_fatalities = sum(number_of_fatalities, na.rm = TRUE),\n            total_injuries = sum(number_of_injuries, na.rm = TRUE)) %>%\n  arrange(desc(total_fatalities))\n\n# View the aggregated data\nprint(road_aggregated)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 14 features and 3 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: 591277.5 ymin: 1486846 xmax: 710166.1 ymax: 1576520\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 14 × 4\n   road_description    total_fatalities total_injuries                  geometry\n   <chr>                          <dbl>          <dbl>          <MULTIPOINT [m]>\n 1 straight road                    639           6249 ((591277.5 1545514), (59…\n 2 other                             89            539 ((604914.7 1548870), (60…\n 3 wide curve                        45            254 ((605960.9 1537813), (60…\n 4 t-intersection                    22             63 ((599469.8 1542071), (61…\n 5 y-intersection                     8             35 ((629514.6 1526365), (62…\n 6 grade-separated in…                6             95 ((654173 1525967), (6560…\n 7 sharp curve                        5             16 ((621201.3 1498072), (62…\n 8 connecting to publ…                4             35 ((606712.6 1557002), (60…\n 9 connecting to priv…                2              8 ((595545.3 1542719), (61…\n10 four-way intersect…                2              4 ((616900.4 1556213), (62…\n11 roundabout                         1              2 ((614608.3 1523654), (65…\n12 connecting to scho…                0              4 ((646878.1 1550240), (66…\n13 merge lane                         0              8 ((665780.8 1524036), (66…\n14 u-turn area                        0              3 ((641181.3 1509733), (66…\n```\n\n\n:::\n:::\n\n\n\n\n**Step 2: Visualize Accident Hotspots on Different Road Types**\n\nFor visualization, we can use **kernel density estimation (KDE)** and **spatial analysis** to show accident hotspots and how they are distributed across different road types like straight roads, intersections, etc.\n\nThis display the density on a map, with red dots representing accident locations on straight roads within the BMR.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_boundaries_bmr_simplified) +\n  tm_borders(lwd = 1.5, col = \"black\") +\n  tm_shape(filter(accidents_bmr, road_description == \"straight road\")) +\n  tm_dots(col = \"red\", size = 0.1, title = \"Straight Road Accidents\") +\n  tm_layout(title = \"Accidents on Straight Roads\", legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_boundaries_bmr_simplified) +\n  tm_borders(lwd = 1.5, col = \"black\") +\n  tm_shape(filter(accidents_bmr, road_description == \"sharp curve\")) +\n  tm_dots(col = \"blue\", size = 0.1, title = \"Sharp Curve Accidents\") +\n  tm_layout(title = \"Accidents on Sharp Curves\", legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_boundaries_bmr_simplified) +\n  tm_borders(lwd = 1.5, col = \"black\") +\n  tm_shape(filter(accidents_bmr, road_description == \"roundabout\")) +\n  tm_dots(col = \"green\", size = 0.1, title = \"Roundabout Accidents\") +\n  tm_layout(title = \"Accidents on Roundabouts\", legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_boundaries_bmr_simplified) +\n  tm_borders(lwd = 1.5, col = \"black\") +\n  tm_shape(filter(accidents_bmr, road_description == \"connecting to private area\")) +\n  tm_dots(col = \"yellow\", size = 0.1, title = \"Accidents on Private Area Roads\") +\n  tm_layout(title = \"Accidents on Private Area Roads\", legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_boundaries_bmr_simplified) +\n  tm_borders(lwd = 1.5, col = \"black\") +\n  tm_shape(filter(accidents_bmr, road_description == \"connecting to public/commercial area\")) +\n  tm_dots(col = \"purple\", size = 0.1, title = \"Accidents on Public/Commercial Roads\") +\n  tm_layout(title = \"Accidents on Public/Commercial Roads\", legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_boundaries_bmr_simplified) +\n  tm_borders(lwd = 1.5, col = \"black\") +\n  tm_shape(filter(accidents_bmr, road_description == \"connecting to school area\")) +\n  tm_dots(col = \"orange\", size = 0.1, title = \"Accidents on School Roads\") +\n  tm_layout(title = \"Accidents on School Roads\", legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_boundaries_bmr_simplified) +\n  tm_borders(lwd = 1.5, col = \"black\") +\n  tm_shape(filter(accidents_bmr, road_description == \"four-way intersection\")) +\n  tm_dots(col = \"pink\", size = 0.1, title = \"Four-way Intersection Accidents\") +\n  tm_layout(title = \"Accidents on Four-way Intersections\", legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_boundaries_bmr_simplified) +\n  tm_borders(lwd = 1.5, col = \"black\") +\n  tm_shape(filter(accidents_bmr, road_description == \"grade-separated intersection/ramps\")) +\n  tm_dots(col = \"cyan\", size = 0.1, title = \"Grade-separated Intersection/Ramps Accidents\") +\n  tm_layout(title = \"Accidents on Grade-separated Intersections\", legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_boundaries_bmr_simplified) +\n  tm_borders(lwd = 1.5, col = \"black\") +\n  tm_shape(filter(accidents_bmr, road_description == \"merge lane\")) +\n  tm_dots(col = \"magenta\", size = 0.1, title = \"Merge Lane Accidents\") +\n  tm_layout(title = \"Accidents on Merge Lanes\", legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_boundaries_bmr_simplified) +\n  tm_borders(lwd = 1.5, col = \"black\") +\n  tm_shape(filter(accidents_bmr, road_description == \"t-intersection\")) +\n  tm_dots(col = \"green\", size = 0.1, title = \"T-intersection Accidents\") +\n  tm_layout(title = \"Accidents on T-intersections\", legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_boundaries_bmr_simplified) +\n  tm_borders(lwd = 1.5, col = \"black\") +\n  tm_shape(filter(accidents_bmr, road_description == \"y-intersection\")) +\n  tm_dots(col = \"blue\", size = 0.1, title = \"Y-intersection Accidents\") +\n  tm_layout(title = \"Accidents on Y-intersections\", legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter for specific road types, e.g., straight roads\nstraight_road_accidents <- accidents_bmr %>%\n  filter(road_description == \"straight road\")\n\n# Convert to a spatial object\nstraight_road_accidents_sf <- st_as_sf(straight_road_accidents)\n\n# Ensure the CRS is set correctly\nst_crs(straight_road_accidents_sf) <- st_crs(admin_boundaries_bmr_simplified)\n\n# Convert to spatstat format for density estimation\nwindow <- as.owin(st_bbox(admin_boundaries_bmr_simplified))\nstraight_road_ppp <- as.ppp(st_coordinates(straight_road_accidents_sf), W = window)\n\n# Perform Kernel Density Estimation with adjusted parameters\nstraight_road_density <- density(straight_road_ppp, sigma = 100, eps = 50, edge = TRUE)\n\n# Convert the density output to a raster object\nstraight_road_density_raster <- raster(straight_road_density)\n\n# Ensure raster and sf objects have the same CRS\ncrs(straight_road_density_raster) <- st_crs(admin_boundaries_bmr_simplified)$proj4string\n\n# Plot Straight road accident density\ntm_shape(admin_boundaries_bmr_simplified) +\n  tm_borders(col = \"black\", lwd = 1.5, alpha = 0.5) +  # Add boundaries with semi-transparency\n  tm_shape(straight_road_density_raster) +\n  tm_raster(palette = \"-viridis\", \n            style = \"fisher\",\n            n = 9,\n            title = \"Straight Road Accident Density\",\n            alpha = 0.7) +\n  tm_shape(straight_road_accidents_sf) +\n  tm_dots(col = \"red\", size = 0.05, alpha = 0.5) +\n  tm_shape(admin_boundaries_bmr_simplified) +  # Add boundaries again on top\n  tm_borders(col = \"black\", lwd = 1.5, alpha = 0.5) +\n  tm_layout(title = \"Accident Density on Straight Roads in BMR\",\n            legend.outside = TRUE,\n            legend.title.size = 0.8,\n            legend.text.size = 0.6,\n            frame = FALSE) +\n  tm_scale_bar(position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\n\n\nThe map shows the **Kernel Density Estimation (KDE)** of road accidents on straight roads in the BMR. KDE is a technique used to estimate the density of events (accidents in this case) over a geographical area. The heatmap overlay on the map helps identify areas where accidents are most concentrated.\n\n**Interpretation:**\n\n-   **High accident density on straight roads**: The red dots represent accidents, and the colored density gradient (ranging from dark red to yellow) indicates accident density. The areas with darker red indicate higher concentrations of accidents.\n\n-   **Focus on hotspots**: These high-density areas could point to specific road conditions, traffic patterns, or driver behavior that make straight roads particularly risky in these locations.\n\nThe observation that **straight roads have the most accidents** could be attributed to various factors such as high speed, inattentiveness, or driver fatigue, which are more common on long, straight sections of roads where drivers may feel more relaxed and less alert. These factors align with studies indicating that **straight roads often lead to more severe accidents**, especially at higher speeds. This analysis highlights the importance of focusing traffic safety measures, like speed controls and driver awareness programs, on these high-risk zones.\n\n#### Further analysis on driver behavior on straight road\n\n**Step 1: Descriptive Statistics of Accidents on Straight Roads**\n\n-   **Filter the accidents for straight roads**: Use the existing dataset to filter out the accidents that occurred specifically on straight roads.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstraight_road_accidents <- filter(accidents_bmr, road_description == \"straight road\")\n```\n:::\n\n\n\n\n-   **Summarize the causes of accidents**: Aggregate the data by the presumed cause of accidents on straight roads to identify the primary causes. This will give you a breakdown of accidents on straight roads by cause, fatalities, and injuries.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregate accident counts by presumed cause\nstraight_road_accident_causes_aggregated <- straight_road_accidents %>%\n  group_by(presumed_cause) %>%\n  summarise(total_accidents = n()) %>%\n  arrange(desc(total_accidents))\n\n# View the aggregated data in descending order\nprint(straight_road_accident_causes_aggregated)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 36 features and 2 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 591277.5 ymin: 1486846 xmax: 710166.1 ymax: 1576520\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 36 × 3\n   presumed_cause                      total_accidents                  geometry\n   <chr>                                         <int>          <MULTIPOINT [m]>\n 1 speeding                                       8829 ((593843.8 1550868), (59…\n 2 other                                           716 ((624456.5 1494214), (63…\n 3 cutting in closely by people/vehic…             529 ((595540.6 1542724), (60…\n 4 vehicle equipment failure                       325 ((606366 1562577), (6066…\n 5 falling asleep                                  189 ((597876.3 1547500), (60…\n 6 driving under the influence of alc…              95 ((607471.8 1545956), (61…\n 7 tailgating                                       67 ((622420.1 1491733), (64…\n 8 running red lights/traffic signals               62 ((611111.8 1526277), (62…\n 9 abrupt lane change                               42 ((603057.8 1533623), (63…\n10 illegal overtaking                               41 ((622895.3 1508505), (62…\n# ℹ 26 more rows\n```\n\n\n:::\n:::\n\n\n\n\n**Step 2: Spatial Visualization of Accident Causes**\n\n-   Create separate maps showing the distribution of accidents on straight roads by specific causes. For example, a map for accidents caused by speeding, driver fatigue, and reckless driving.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_boundaries_bmr_simplified) +\n  tm_borders(lwd = 1.5, col = \"black\") +\n  tm_shape(roads_bmr) +  # Add road network (no tm_raster, as it's a line)\n  tm_lines(col = \"brown\", lwd = 0.01, alpha = 0.1) +   \n  tm_shape(filter(accidents_bmr, road_description == \"straight road\" & presumed_cause == \"speeding\")) +\n  tm_dots(col = \"red\", size = 0.1, title = \"Speeding Accidents\") +\n  tm_layout(title = \"Speeding Accidents on Straight Roads\", legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_boundaries_bmr_simplified) +\n  tm_borders(lwd = 1.5, col = \"black\") +\n  tm_shape(roads_bmr) +  # Add road network (no tm_raster, as it's a line)\n  tm_lines(col = \"brown\", lwd = 0.01, alpha = 0.1) +   \n  tm_shape(filter(accidents_bmr, road_description == \"straight road\" & presumed_cause == \"cutting in closely by people/vehicles/animals\")) +\n  tm_dots(col = \"red\", size = 0.1, title = \"Other Causes Accidents\") +\n  tm_layout(title = \"Other Causes Accidents on Straight Roads\", legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_boundaries_bmr_simplified) +\n  tm_borders(lwd = 1.5, col = \"black\") +\n  tm_shape(roads_bmr) +  # Add road network (no tm_raster, as it's a line)\n  tm_lines(col = \"brown\", lwd = 0.01, alpha = 0.1) +   \n  tm_shape(filter(accidents_bmr, road_description == \"straight road\" & presumed_cause == \"cutting in closely by people/vehicles/animals\")) +\n  tm_dots(col = \"red\", size = 0.1, title = \"People and Animal related Accidents\") +\n  tm_layout(title = \"People and Animal related Accidents on Straight Roads\", legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_boundaries_bmr_simplified) +\n  tm_borders(lwd = 1.5, col = \"black\") +\n  tm_shape(roads_bmr) +  # Add road network (no tm_raster, as it's a line)\n  tm_lines(col = \"brown\", lwd = 0.01, alpha = 0.1) +   \n  tm_shape(filter(accidents_bmr, road_description == \"straight road\" & presumed_cause == \"vehicle equipment failure\")) +\n  tm_dots(col = \"red\", size = 0.1, title = \"Vehicle Equipment Failure related Accidents\") +\n  tm_layout(title = \"Vehicle Equipment Failure related Accidents on Straight Roads\", legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_boundaries_bmr_simplified) +\n  tm_borders(lwd = 1.5, col = \"black\") +\n  tm_shape(roads_bmr) +  # Add road network (no tm_raster, as it's a line)\n  tm_lines(col = \"brown\", lwd = 0.01, alpha = 0.1) +   \n  tm_shape(filter(accidents_bmr, road_description == \"straight road\" & presumed_cause == \"vehicle equipment failure\")) +\n  tm_dots(col = \"red\", size = 0.1, title = \"Vehicle Equipment Failure related Accidents\") +\n  tm_layout(title = \"Vehicle Equipment Failure related Accidents on Straight Roads\", legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n\n\n\nStep 3: **Comparative Analysis by Region**:\n\nWe also compare which regions within BMR are more prone to certain types of accidents on straight roads. Create a heatmap or bar chart showing the distribution by region.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregion_comparison <- accidents_bmr %>%\n  filter(road_description == \"straight road\") %>%\n  group_by(ADM1_EN, presumed_cause) %>%\n  summarise(total_accidents = n())\n\nggplot(region_comparison, aes(x = ADM1_EN, y = total_accidents, fill = presumed_cause)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Accidents on Straight Roads by Region and Cause\", x = \"Region\", y = \"Total Accidents\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Take-homeExercise1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}