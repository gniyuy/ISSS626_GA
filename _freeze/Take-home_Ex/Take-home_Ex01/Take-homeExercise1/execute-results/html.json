{
  "hash": "3effe791e98a228341809ea1227812e2",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  html:\n    theme: lux\n    number-sections: true\n\ntitle: \"Take-home Exercise 1\"\nauthor: \"Tai Yu Ying\"\ndate: \"Sep 8 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\n---\n\n\n## Overview\n\nRoad traffic accidents are a major global health issue, causing millions of deaths and injuries each year. The majority of fatalities occur in low- and middle-income countries, particularly among vulnerable road users. These accidents not only lead to human suffering but also impose a significant economic burden on individuals, families, and nations. Thailand, in particular, has a high rate of road traffic deaths, with a significant portion of accidents occurring on national highways and in designated \"black spots.\"\n\n## Objective\n\nThe objective of this project is to investigate the factors influencing road traffic accidents in the Bangkok Metropolitan Region (BMR) using spatial and spatio-temporal point pattern analysis.\n\n-   **Visualize spatio-temporal dynamics:** Use statistical graphics and geovisualization methods to depict the distribution of road traffic accidents over time and space.\n\n-   **Conduct spatial analysis:** Employ network-based spatial point pattern analysis methods to examine the spatial distribution of accidents within the road network.\n\n-   **Conduct spatio-temporal analysis:** Utilize temporal network-based spatial point pattern analysis methods to explore the relationship between accidents and both spatial and temporal factors.\n\n## The Data\n\nThree basic data sets are used, they are:\n\n-   [Thailand Road Accident \\[2019-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle\n\n-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.\n\n## Installing and launching the R packages\n\nIn this exercise, four R packages will be used, they are:\n\n-   [spNetwork](https://cran.r-project.org/web/packages/spNetwork/index.html), which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\n\n-   [sf](https://r-spatial.github.io/sf/index.html) package provides functions to manage, processing, and manipulate **Simple Features**, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons.\n\n-   [tmap](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.\n\nUse the code chunk below to install and launch the four R packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spNetwork, tmap, tidyverse)\n```\n:::\n\n\n## Data Import and Preparation\n\n### Importing [Thailand Road Accident \\[2019-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022)\n\nSince `acc` data set is in csv file format, we will use [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package to import `thai_road_accident_2019_2022.csv` as shown the code chunk below. The output R object is called `acc`.\n\n::: panel-tabset\n### Objectives\n\nThe below code uses the following to:\n\n-   **`read_csv()`**: This function is used to load the CSV file (`thai_road_accident_2019_2022.csv`) into R. The dataset is stored in a variable called `acc`.\n\n-   **`filter()`**: This function is from the `dplyr` package and is used to filter the rows of the dataset.\n\n-   **`!is.na(longitude) & !is.na(latitude)`**: This condition ensures that only rows where both `longitude` and `latitude` are not missing (`NA`) are kept. Any rows with missing coordinates will be removed.\n\n-   **`mutate()`**: This function is used to create or modify columns in a dataframe\n\n-   **`month(incident_datetime)`**: This function extracts the month from the `incident_datetime` column, and stores it in a new column called `Month_num` (numeric form of the month)\n\n-   **`month(incident_datetime, label = TRUE, abbr = TRUE)`**: This extracts the month in a labeled form, and it will be abbreviated (e.g., \"Jan\", \"Feb\"). This is stored in a new column called `Month_fac`\n\n-   **`day(incident_datetime)`**: This extracts the day of the month from the `incident_datetime` column and stores it in a new column called `dayofweek`\n\n-   **`st_as_sf()`**: This function from the `sf` package is used to convert the dataframe to a simple features (spatial) object\n\n-   **`coords = c(\"longitude\", \"latitude\")`**: This argument tells `st_as_sf()` to use the `longitude` and `latitude` columns to define the spatial coordinates\n\n-   **`crs = 4326`**: This specifies the Coordinate Reference System (CRS) for the spatial object. EPSG:4326 refers to **WGS 84**, which is the standard geographic CRS (latitude and longitude in degrees)\n\n-   **`st_transform()`**: This function is used to reproject the spatial object to a different CRS\n\n-   **`crs = 32647`**: This specifies the target CRS, which is **UTM Zone 47N**. This is a projected CRS that uses meters as units and is more appropriate for spatial analysis in Thailand. EPSG:32647 is commonly used for accurate distance and area measurements in this region\n\n### The code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc <- read_csv(\"Data/rawdata/thai_road_accident_2019_2022.csv\") %>%\n  filter(!is.na(longitude) & !is.na(latitude)) %>%   # Filter out rows with missing geographic coordinates\n  mutate(Month_num = month(incident_datetime)) %>%\n  mutate(Month_fac = month(incident_datetime, label = TRUE, abbr = TRUE)) %>%\n  mutate(dayofweek = day(incident_datetime)) %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %>%  # Specify the CRS\n  st_transform(crs = 32647)  # Transform to your desired CRS\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(acc, \"Data/rds/acc.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nacc <- read_rds(\"Data/rds/acc.rds\")\n```\n:::\n\n\n### Missing data check\n\nWe can identify rows with missing values by applying *filter()* in combination with *is.na()* to check each column in your dataset. The function *if_any()* checks all columns, and if any of the columns contain *NA*, the corresponding row will be flagged.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Identify rows with missing values\nacc_incomplete <- acc %>%\n  filter(if_any(everything(), is.na))\n\n# View incomplete rows\nacc_incomplete\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 0 features and 19 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 0 × 20\n# ℹ 20 variables: acc_code <dbl>, incident_datetime <dttm>,\n#   report_datetime <dttm>, province_th <chr>, province_en <chr>, agency <chr>,\n#   route <chr>, vehicle_type <chr>, presumed_cause <chr>, accident_type <chr>,\n#   number_of_vehicles_involved <dbl>, number_of_fatalities <dbl>,\n#   number_of_injuries <dbl>, weather_condition <chr>, road_description <chr>,\n#   slope_description <chr>, Month_num <dbl>, Month_fac <ord>, dayofweek <int>,\n#   geometry <GEOMETRY [m]>\n```\n\n\n:::\n:::\n\n\n### Examine output\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\n\nThe code chunk below shows *summary()* and *list()* of Base R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(acc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    acc_code       incident_datetime               \n Min.   : 571834   Min.   :2019-01-01 00:00:00.00  \n 1st Qu.:3789326   1st Qu.:2020-01-16 14:57:30.00  \n Median :3823434   Median :2021-01-02 18:30:00.00  \n Mean   :4228913   Mean   :2021-01-08 11:25:47.25  \n 3rd Qu.:5830777   3rd Qu.:2022-01-02 19:17:00.00  \n Max.   :7571316   Max.   :2022-12-31 23:55:00.00  \n                                                   \n report_datetime                  province_th        province_en       \n Min.   :2019-01-01 03:05:00.00   Length:81376       Length:81376      \n 1st Qu.:2020-03-16 15:27:00.00   Class :character   Class :character  \n Median :2021-03-31 08:39:00.00   Mode  :character   Mode  :character  \n Mean   :2021-03-26 16:52:04.98                                        \n 3rd Qu.:2022-03-01 10:02:15.00                                        \n Max.   :2023-01-26 13:20:00.00                                        \n                                                                       \n    agency             route           vehicle_type       presumed_cause    \n Length:81376       Length:81376       Length:81376       Length:81376      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n accident_type      number_of_vehicles_involved number_of_fatalities\n Length:81376       Min.   : 0.000              Min.   : 0.0000     \n Class :character   1st Qu.: 1.000              1st Qu.: 0.0000     \n Mode  :character   Median : 1.000              Median : 0.0000     \n                    Mean   : 1.535              Mean   : 0.1461     \n                    3rd Qu.: 2.000              3rd Qu.: 0.0000     \n                    Max.   :27.000              Max.   :13.0000     \n                                                                    \n number_of_injuries weather_condition  road_description   slope_description \n Min.   : 0.0000    Length:81376       Length:81376       Length:81376      \n 1st Qu.: 0.0000    Class :character   Class :character   Class :character  \n Median : 0.0000    Mode  :character   Mode  :character   Mode  :character  \n Mean   : 0.8139                                                            \n 3rd Qu.: 1.0000                                                            \n Max.   :51.0000                                                            \n                                                                            \n   Month_num        Month_fac       dayofweek              geometry    \n Min.   : 1.000   Dec    : 9621   Min.   : 1.00   POINT        :81376  \n 1st Qu.: 3.000   Apr    : 9403   1st Qu.: 8.00   epsg:32647   :    0  \n Median : 6.000   Jan    : 8494   Median :15.00   +proj=utm ...:    0  \n Mean   : 6.469   Mar    : 6468   Mean   :15.72                        \n 3rd Qu.:10.000   Oct    : 6293   3rd Qu.:24.00                        \n Max.   :12.000   Jul    : 6255   Max.   :31.00                        \n                  (Other):34842                                        \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(acc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\nSimple feature collection with 81376 features and 19 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -16183190 ymin: -936.228 xmax: 1200243 ymax: 4918525\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 81,376 × 20\n   acc_code incident_datetime   report_datetime     province_th province_en     \n *    <dbl> <dttm>              <dttm>              <chr>       <chr>           \n 1   571905 2019-01-01 00:00:00 2019-01-02 06:11:00 ลพบุรี        Loburi          \n 2  3790870 2019-01-01 00:03:00 2020-02-20 13:48:00 อุบลราชธานี   Ubon Ratchathani\n 3   599075 2019-01-01 00:05:00 2019-01-01 10:35:00 ประจวบคีรีขันธ์ Prachuap Khiri …\n 4   571924 2019-01-01 00:20:00 2019-01-02 05:12:00 เชียงใหม่     Chiang Mai      \n 5   599523 2019-01-01 00:25:00 2019-01-04 09:42:00 นครสวรรค์    Nakhon Sawan    \n 6   571982 2019-01-01 00:30:00 2019-01-07 12:46:00 แม่ฮ่องสอน    Mae Hong Son    \n 7   612782 2019-01-01 00:30:00 2019-10-25 14:25:00 ชุมพร        Chumphon        \n 8   599235 2019-01-01 00:35:00 2019-01-02 16:23:00 สิงห์บุรี       Sing Buri       \n 9   600643 2019-01-01 00:40:00 2019-01-11 10:01:00 สงขลา       Songkhla        \n10   599105 2019-01-01 00:45:00 2019-01-01 10:11:00 ตราด        Trat            \n# ℹ 81,366 more rows\n# ℹ 15 more variables: agency <chr>, route <chr>, vehicle_type <chr>,\n#   presumed_cause <chr>, accident_type <chr>,\n#   number_of_vehicles_involved <dbl>, number_of_fatalities <dbl>,\n#   number_of_injuries <dbl>, weather_condition <chr>, road_description <chr>,\n#   slope_description <chr>, Month_num <dbl>, Month_fac <ord>, dayofweek <int>,\n#   geometry <POINT [m]>\n```\n\n\n:::\n:::\n\n\n### Selecting relevant columns\n\n1.  **`acc_code`**: Unique identifier for each accident. Useful for tracking individual incidents.\n\n2.  **`incident_datetime`**: Date and time of the accident. Important for temporal analysis (e.g., analyzing accidents by time of day or day of the week).\n\n3.  **`province_en`**: The province where the accident occurred. You’ll need this to filter accidents within the Bangkok Metropolitan Region (BMR).\n\n4.  **`vehicle_type`**: The type of vehicles involved in the accident. This is useful for understanding vehicle-specific trends in accidents.\n\n5.  **`presumed_cause`**: The suspected cause of the accident. This helps with behavioral analysis and understanding the major factors contributing to accidents.\n\n6.  **`accident_type`**: Type of accident (e.g., collision, rollover). This helps categorize the nature of accidents.\n\n7.  **`number_of_vehicles_involved`**: The number of vehicles involved. Useful for analyzing accident severity.\n\n8.  **`number_of_fatalities`**: The number of fatalities in the accident. Important for assessing the severity and impact of accidents.\n\n9.  **`number_of_injuries`**: The number of injuries in the accident. Another key factor for assessing the seriousness of accidents.\n\n10. **`weather_condition`**: Weather conditions at the time of the accident. Useful for understanding environmental factors affecting accidents.\n\n11. **`latitude` and `longitude`**: Coordinates of the accident location. These are crucial for spatial analysis, including mapping accidents and performing spatial joins with road networks.\n\n12. **`road_description`**: A description of the road (e.g., highway, intersection). Helps in identifying road-specific characteristics linked to accidents.\n\n13. **`slope_description`**: Description of the slope of the road. Useful for analyzing road conditions that may contribute to accidents.\n\n### Why These Columns?\n\n-   **Temporal Analysis**: `incident_datetime` will allow you to analyze patterns based on time (e.g., peak accident times or seasons).\n\n-   **Spatial Analysis**: `latitude` and `longitude` are essential for mapping the accident locations and performing spatial joins with your roads dataset.\n\n-   **Accident Characteristics**: Columns like `vehicle_type`, `presumed_cause`, `accident_type`, and `weather_condition` help you understand the types of accidents and contributing factors.\n\n-   **Severity Indicators**: `number_of_fatalities` and `number_of_injuries` help assess the severity of each accident.\n\n-   **Road Context**: `road_description` and `slope_description` provide additional context on road conditions that may influence accidents.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter the dataset to include only the relevant columns\naccidents_filtered <- acc %>%\n  select(acc_code, \n         incident_datetime,\n         Month_num,\n         Month_fac,\n         dayofweek,\n         province_en, \n         vehicle_type, \n         presumed_cause, \n         accident_type,\n         number_of_vehicles_involved, \n         number_of_fatalities,\n         number_of_injuries, \n         weather_condition, \n         road_description, \n         slope_description,\n         geometry)\n\n# View the first few rows of the filtered dataset\nhead(accidents_filtered)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 15 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 386299.4 ymin: 1368107 xmax: 1130617 ymax: 2080805\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 16\n  acc_code incident_datetime   Month_num Month_fac dayofweek province_en        \n     <dbl> <dttm>                  <dbl> <ord>         <int> <chr>              \n1   571905 2019-01-01 00:00:00         1 Jan               1 Loburi             \n2  3790870 2019-01-01 00:03:00         1 Jan               1 Ubon Ratchathani   \n3   599075 2019-01-01 00:05:00         1 Jan               1 Prachuap Khiri Khan\n4   571924 2019-01-01 00:20:00         1 Jan               1 Chiang Mai         \n5   599523 2019-01-01 00:25:00         1 Jan               1 Nakhon Sawan       \n6   571982 2019-01-01 00:30:00         1 Jan               1 Mae Hong Son       \n# ℹ 10 more variables: vehicle_type <chr>, presumed_cause <chr>,\n#   accident_type <chr>, number_of_vehicles_involved <dbl>,\n#   number_of_fatalities <dbl>, number_of_injuries <dbl>,\n#   weather_condition <chr>, road_description <chr>, slope_description <chr>,\n#   geometry <POINT [m]>\n```\n\n\n:::\n:::\n\n:::\n\n### Importing [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads)\n\nThe code chunk below uses *st_read()* function of **sf** package to import `hotosm_tha_roads_lines_shp` shapefile into R as a polygon feature data frame. \n\n::: panel-tabset\n### Objectives\n\nThe below code uses the following to:\n\n-   **`st_read()`**: Reads the Shapefile.\n\n-   **`st_crs()`**: Checks the CRS of the dataset.\n\n-   **`colSums(is.na(st_drop_geometry()))`**: Checks for missing values in attribute columns (excluding geometries).\n\n-   **`st_is_valid()`**: Checks if the geometries are valid.\n\n-   **`st_make_valid()`**: Cleans invalid geometries if any exist.\n\n-   **`st_transform()`**: Transforms the dataset to **UTM Zone 47N (EPSG:32647)** for better spatial accuracy in Thailand.\n\n-   **`drop_na()`**: Removes rows with missing values in attributes.\n\n-   **`summary()`**: Provides a summary of the cleaned dataset.\n\n### The code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read only necessary columns (adjust column names as needed)\nroads_raw <- st_read(\"Data/rawdata/hotosm_tha_roads_lines_shp.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `hotosm_tha_roads_lines_shp' from data source \n  `C:\\gniyuy\\ISSS626_GA\\Take-home_Ex\\Take-home_Ex01\\Data\\rawdata\\hotosm_tha_roads_lines_shp.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2792361 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 97.34457 ymin: 5.643645 xmax: 105.6528 ymax: 20.47168\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check CRS\nprint(st_crs(roads_raw))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check for invalid geometries\ninvalid_count <- sum(!st_is_valid(roads_raw))\nprint(paste(\"Number of invalid geometries:\", invalid_count))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Number of invalid geometries: 0\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Clean and transform data\nroads_cleaned <- roads_raw %>%\n  {if(invalid_count > 0) st_make_valid(.) else .} %>%\n  st_transform(crs = 32647)\n\n# Provide a summary of the cleaned dataset\nprint(\"Summary of the cleaned dataset:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary of the cleaned dataset:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(roads_cleaned)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     name             name_en            highway            surface         \n Length:2792361     Length:2792361     Length:2792361     Length:2792361    \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n  smoothness           width              lanes              oneway         \n Length:2792361     Length:2792361     Length:2792361     Length:2792361    \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    bridge             layer              source            name_th         \n Length:2792361     Length:2792361     Length:2792361     Length:2792361    \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n     osm_id            osm_type                    geometry      \n Min.   :4.271e+06   Length:2792361     MULTILINESTRING:2792361  \n 1st Qu.:5.269e+08   Class :character   epsg:32647     :      0  \n Median :6.296e+08   Mode  :character   +proj=utm ...  :      0  \n Mean   :6.896e+08                                               \n 3rd Qu.:9.353e+08                                               \n Max.   :1.316e+09                                               \n```\n\n\n:::\n:::\n\n:::\n\n### Importing [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?)\n\nThe code chunk below uses *st_read()* function of **sf** package to import `tha_adm_rtsd_itos_20210121_SHP` shapefile into R as a polygon feature data frame. \n\n::: panel-tabset\n### Objectives\n\nThe below code uses the following to:\n\n-   **`st_read()`**: Reads the Shapefile for the administrative boundaries of Thailand\n\n-   **`st_crs()`**: Checks the Coordinate Reference System of the dataset\n\n-   **`st_geometry_type()`**: Identifies the geometry type (e.g., polygons, points, etc.)\n\n-   **`st_bbox()`**: Displays the bounding box (extent) of the dataset\n\n-   **`colSums(is.na(st_drop_geometry()))`**: Calculates the number of missing values in each attribute column (non-geometry columns)\n\n-   **`st_is_valid()`**: Checks if there are any invalid geometries in the dataset\n\n-   **`st_make_valid()`**: Cleans invalid geometries, if any exist\n\n-   **`st_transform(crs = 32647)`**: Transforms the dataset to **UTM Zone 47N (EPSG:32647)** for spatial accuracy in Thailand\n\n-   **`drop_na()`**: Removes rows where any attribute columns contain missing values\n\n-   **`summary()`**: Provides a summary of the final cleaned dataset, including both attribute data and geometries\n\n### The code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read the data\nadmin_boundaries_raw <- st_read(\"Data/rawdata/tha_admbnda_adm2_rtsd_20220121.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm2_rtsd_20220121' from data source \n  `C:\\gniyuy\\ISSS626_GA\\Take-home_Ex\\Take-home_Ex01\\Data\\rawdata\\tha_admbnda_adm2_rtsd_20220121.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 928 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check Geospatial Properties\nprint(\"Geospatial Properties:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Geospatial Properties:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(st_crs(admin_boundaries_raw))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(st_geometry_type(admin_boundaries_raw))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n  [6] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [11] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [16] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [21] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [26] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [31] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [36] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [41] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [46] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [51] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [56] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [61] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [66] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [71] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [76] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [81] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [86] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [91] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n [96] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[101] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[106] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[111] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[116] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[121] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[126] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[131] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[136] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[141] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[146] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[151] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[156] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[161] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[166] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[171] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[176] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[181] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[186] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[191] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[196] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[201] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[206] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[211] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[216] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[221] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[226] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[231] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[236] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[241] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[246] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[251] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[256] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[261] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[266] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[271] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[276] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[281] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[286] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[291] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[296] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[301] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[306] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[311] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[316] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[321] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[326] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[331] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[336] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[341] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[346] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[351] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[356] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[361] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[366] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[371] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[376] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[381] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[386] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[391] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[396] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[401] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[406] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[411] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[416] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[421] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[426] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[431] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[436] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[441] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[446] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[451] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[456] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[461] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[466] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[471] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[476] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[481] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[486] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[491] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[496] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[501] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[506] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[511] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[516] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[521] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[526] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[531] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[536] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[541] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[546] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[551] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[556] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[561] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[566] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[571] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[576] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[581] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[586] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[591] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[596] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[601] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[606] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[611] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[616] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[621] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[626] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[631] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[636] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[641] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[646] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[651] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[656] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[661] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[666] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[671] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[676] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[681] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[686] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[691] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[696] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[701] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[706] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[711] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[716] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[721] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[726] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[731] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[736] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[741] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[746] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[751] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[756] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[761] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[766] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[771] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[776] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[781] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[786] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[791] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[796] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[801] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[806] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[811] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[816] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[821] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[826] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[831] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[836] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[841] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[846] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[851] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[856] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[861] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[866] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[871] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[876] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[881] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[886] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[891] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[896] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[901] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[906] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[911] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[916] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[921] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n[926] MULTIPOLYGON MULTIPOLYGON MULTIPOLYGON\n18 Levels: GEOMETRY POINT LINESTRING POLYGON MULTIPOINT ... TRIANGLE\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(st_bbox(admin_boundaries_raw))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      xmin       ymin       xmax       ymax \n 97.343358   5.613038 105.636965  20.465074 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Check for Invalid Geometries\ninvalid_count <- sum(!st_is_valid(admin_boundaries_raw))\nprint(paste(\"Number of invalid geometries:\", invalid_count))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Number of invalid geometries: 0\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Clean and Transform Data\nadmin_boundaries_cleaned <- admin_boundaries_raw %>%\n  st_transform(crs = 32647) \n\n# Provide Summary of the Cleaned Dataset\nprint(\"Summary of the cleaned dataset:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary of the cleaned dataset:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(admin_boundaries_cleaned)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Shape_Leng        Shape_Area          ADM2_EN            ADM2_TH         \n Min.   :0.05123   Min.   :0.0001177   Length:928         Length:928        \n 1st Qu.:0.86613   1st Qu.:0.0195873   Class :character   Class :character  \n Median :1.22369   Median :0.0379046   Mode  :character   Mode  :character  \n Mean   :1.31536   Mean   :0.0467710                                        \n 3rd Qu.:1.68395   3rd Qu.:0.0629092                                        \n Max.   :4.34007   Max.   :0.4075191                                        \n  ADM2_PCODE          ADM2_REF          ADM2ALT1EN         ADM2ALT2EN       \n Length:928         Length:928         Length:928         Length:928        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n  ADM2ALT1TH         ADM2ALT2TH          ADM1_EN            ADM1_TH         \n Length:928         Length:928         Length:928         Length:928        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n  ADM1_PCODE          ADM0_EN            ADM0_TH           ADM0_PCODE       \n Length:928         Length:928         Length:928         Length:928        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      date               validOn              validTo          \n Min.   :2019-02-18   Min.   :2022-01-22   Min.   :-001-11-30  \n 1st Qu.:2019-02-18   1st Qu.:2022-01-22   1st Qu.:-001-11-30  \n Median :2019-02-18   Median :2022-01-22   Median :-001-11-30  \n Mean   :2019-02-18   Mean   :2022-01-22   Mean   :-001-11-30  \n 3rd Qu.:2019-02-18   3rd Qu.:2022-01-22   3rd Qu.:-001-11-30  \n Max.   :2019-02-18   Max.   :2022-01-22   Max.   :-001-11-30  \n          geometry  \n MULTIPOLYGON :928  \n epsg:32647   :  0  \n +proj=utm ...:  0  \n                    \n                    \n                    \n```\n\n\n:::\n:::\n\n:::\n\n### Define and filter [Bangkok Metropolitan Region (BMR)](https://en.wikipedia.org/wiki/Bangkok_Metropolitan_Region)\n\nThe **Bangkok Metropolitan Region (BMR)** consists of six key provinces located in the central part of Thailand. These provinces include:\n\n-   **Bangkok (Metropolis)**,\n\n-   **Nonthaburi**,\n\n-   **Samut Prakan**,\n\n-   **Pathum Thani**,\n\n-   **Samut Sakhon**, and\n\n-   **Nakhon Pathom**.\n\nTogether, these regions represent the most urbanized and densely populated areas in Thailand. Bangkok serves as the central hub, with surrounding provinces supporting residential, commercial, and industrial activities. The BMR plays a crucial role in Thailand’s economy, infrastructure, and governance, making it a significant focal point for urban planning and transportation networks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List of provinces in Bangkok Metropolitan Region (BMR)\nbmr_provinces <- c(\"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\")\n```\n:::\n\n\nFirstly, let's filter `acc` dataset to consist accidents only of BMR provinces.\n\nOnce the filter is applied, we can inspect the filtered dataset using `head(accidents_bmr)` to verify that only accidents from the BMR provinces are included.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter the accident dataset for only BMR provinces\naccidents_bmr <- accidents_filtered %>%\n  filter(province_en %in% bmr_provinces)\n\n# View the filtered dataset\nhead(accidents_bmr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 15 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 627012.3 ymin: 1502876 xmax: 693488.9 ymax: 1533381\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 16\n  acc_code incident_datetime   Month_num Month_fac dayofweek province_en  \n     <dbl> <dttm>                  <dbl> <ord>         <int> <chr>        \n1   571882 2019-01-01 02:25:00         1 Jan               1 Nakhon Pathom\n2   600001 2019-01-01 03:00:00         1 Jan               1 Nonthaburi   \n3   605043 2019-01-01 03:00:00         1 Jan               1 Samut Prakan \n4   629691 2019-01-01 03:05:00         1 Jan               1 Bangkok      \n5   571887 2019-01-01 04:30:00         1 Jan               1 Nakhon Pathom\n6   599234 2019-01-01 04:45:00         1 Jan               1 Samut Prakan \n# ℹ 10 more variables: vehicle_type <chr>, presumed_cause <chr>,\n#   accident_type <chr>, number_of_vehicles_involved <dbl>,\n#   number_of_fatalities <dbl>, number_of_injuries <dbl>,\n#   weather_condition <chr>, road_description <chr>, slope_description <chr>,\n#   geometry <POINT [m]>\n```\n\n\n:::\n:::\n\n\nIn this step, we utilize the **Thailand Administrative Boundaries dataset**, which contains detailed geospatial information for all provinces in Thailand. By applying a filter, the dataset is restricted to the six provinces within the Bangkok Metropolitan Region (BMR). This process ensures that the analysis only focuses on these regions, excluding other areas of Thailand. By isolating the BMR boundaries, further geospatial analyses—such as spatial joins and road infrastructure studies—can be accurately conducted within this concentrated urban zone.\n\nWe verify the class of 'admin_boundaries_cleaned'.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(admin_boundaries_cleaned)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter the 'admin_boundaries_cleaned' dataset to keep only BMR provinces\nadmin_boundaries_bmr <- admin_boundaries_cleaned %>%\n  filter(ADM1_EN %in% bmr_provinces)\n```\n:::\n\n\nThe **Thailand Roads dataset** is a comprehensive geospatial dataset that details the road networks throughout the country. After reading the dataset, a spatial join is performed to integrate the filtered BMR administrative boundaries with the roads data. This spatial join ensures that only the road segments located within the defined BMR boundaries are retained for analysis. This step is crucial for focusing the study on the traffic networks within the Bangkok Metropolitan Region, allowing for specific analyses such as traffic flow, accident-prone areas, and infrastructure planning within the urban and suburban contexts of the BMR.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(sf)\nlibrary(dplyr)\n\n# Step 1: Create a bounding box for the BMR area\nbmr_bbox <- st_bbox(admin_boundaries_bmr)\n\n# Step 2: Simplify the BMR boundaries for faster processing\nadmin_boundaries_bmr_simplified <- st_simplify(admin_boundaries_bmr, dTolerance = 100)\n\n# Step 3: Use st_crop to pre-filter roads based on the bounding box (faster)\nroads_filtered_bbox <- st_crop(roads_cleaned, bmr_bbox)\n\n# Step 4: Apply st_intersects only to the cropped roads (fewer roads to process)\nroads_filtered <- roads_filtered_bbox %>%\n  filter(apply(st_intersects(., admin_boundaries_bmr_simplified), 1, any))\n\n# Step 5: Perform the spatial join with the filtered roads\nroads_bmr <- st_join(roads_filtered, admin_boundaries_bmr_simplified, join = st_within, left = FALSE)\n```\n:::\n\n\n## Plotting the Geospatial Data\n\nHere’s how to we can plot the `accidents_bmr`, `admin_boundaries_bmr`, and `roads_bmr` using tmap.\n\nAs before, we need to ensure that the `accidents_bmr`, `admin_boundaries_bmr`, and `roads_bmr` datasets are all in the same CRS.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure all datasets have the same CRS\ncrs_target <- st_crs(admin_boundaries_bmr)\n\n# Transform the accidents dataset\naccidents_filtered <- st_transform(accidents_filtered, crs_target)\n\n# Transform the roads dataset\nroads_bmr <- st_transform(roads_bmr, crs_target)\n```\n:::\n\n\nWe can then create a thematic map with `tmap`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a thematic map using tmap\ntm_shape(admin_boundaries_bmr) +           # Add BMR boundaries\n  tm_borders(lwd = 1.5, col = \"black\") +   # Outline for BMR boundaries\n  tm_shape(roads_bmr) +                    # Add roads\n  tm_lines(col = \"blue\", lwd = 0.5) +      # Blue color for roads\n  tm_shape(accidents_filtered) +           # Add accidents as points\n  tm_dots(col = \"number_of_fatalities\",    # Color by the number of fatalities\n          palette = \"Reds\",                # Use a red palette\n          size = 0.1,                      # Adjust the size of the dots\n          title = \"Fatalities\") +          # Title for the legend\n  tm_layout(title = \"Road Accidents in Bangkok Metropolitan Region (BMR)\",\n            legend.outside = TRUE)         # Layout settings with title and legend outside\n```\n\n::: {.cell-output-display}\n![](Take-homeExercise1_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Take-homeExercise1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}